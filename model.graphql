type Delivery @entity {
  sender: Person @relationship(inverse: "deliveriesSent", preload: true)
  receiver: Person @relationship(inverse: "deliveriesReceived", preload: true)
  deliver: Person @relationship(inverse: "deliveries", preload: true)
  vehicleType: VehicleType! @relationship(inverse: "delivery", preload: true)
  deliveryType: DeliveryType! @relationship(inverse: "delivery")
  deliveryChannel: DeliveryChannel! @relationship(inverse: "delivery")
  paymentId: ID @column(index: "pidx") #Payment id, comes from payment-api, once confirmed
  paymentTotal: Float @column
  paymentOnDeliver: Boolean @column
  collectDateTime: Time @column
  collectAddress: String @column
  collectPoint: String @column
  dropDateTime: Time @column
  dropAddress: String @column
  dropPoint: String @column
  expectedDistance: String @column
  expectedCost: Float @column
  completed: Boolean @column
  smsToken: String @column
  status: String @column(index: "statusidx")
  instructions: String
}

type Person @entity {
  deliver: Boolean @column(default: false)
  email: String! @column(unique: true)
  phone: String @column
  documentNo: String @column
  avatarURL: String @column
  displayName: String @column
  firstName: String @column
  lastName: String @column
  nickName: String @column
  description: String @column
  location: String @column
  deliveries: [Delivery!]! @relationship(inverse: "deliver")
  deliveriesSent: [Delivery!]! @relationship(inverse: "sender")
  deliveriesReceived: [Delivery!]! @relationship(inverse: "receiver")
  userId: ID @column(index: "useridx") #Comes from auth-api
}

type DeliveryType @entity {
  name: String! @column
  description: String @column
  delivery: Delivery @relationship(inverse: "deliveryType")
}

type DeliveryChannel @entity {
  name: String! @column
  description: String @column
  delivery: Delivery @relationship(inverse: "deliveryChannel")
}

type VehicleType @entity {
  name: String! @column
  description: String @column
  delivery: Delivery @relationship(inverse: "vehicleType")
}
