// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Delivery() DeliveryResolver
	DeliveryChannel() DeliveryChannelResolver
	DeliveryChannelResultType() DeliveryChannelResultTypeResolver
	DeliveryResultType() DeliveryResultTypeResolver
	DeliveryType() DeliveryTypeResolver
	DeliveryTypeResultType() DeliveryTypeResultTypeResolver
	Mutation() MutationResolver
	Person() PersonResolver
	PersonResultType() PersonResultTypeResolver
	Query() QueryResolver
	VehicleType() VehicleTypeResolver
	VehicleTypeResultType() VehicleTypeResultTypeResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Delivery struct {
		CollectAddress    func(childComplexity int) int
		CollectDateTime   func(childComplexity int) int
		CollectPoint      func(childComplexity int) int
		Completed         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Deliver           func(childComplexity int) int
		DeliverID         func(childComplexity int) int
		DeliveryChannel   func(childComplexity int) int
		DeliveryChannelID func(childComplexity int) int
		DeliveryType      func(childComplexity int) int
		DeliveryTypeID    func(childComplexity int) int
		DropAddress       func(childComplexity int) int
		DropDateTime      func(childComplexity int) int
		DropPoint         func(childComplexity int) int
		ExpectedCost      func(childComplexity int) int
		ExpectedDistance  func(childComplexity int) int
		ID                func(childComplexity int) int
		Instructions      func(childComplexity int) int
		PaymentID         func(childComplexity int) int
		PaymentOnDeliver  func(childComplexity int) int
		PaymentTotal      func(childComplexity int) int
		Receiver          func(childComplexity int) int
		ReceiverID        func(childComplexity int) int
		Sender            func(childComplexity int) int
		SenderID          func(childComplexity int) int
		SmsToken          func(childComplexity int) int
		Status            func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		VehicleType       func(childComplexity int) int
		VehicleTypeID     func(childComplexity int) int
	}

	DeliveryChannel struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Delivery    func(childComplexity int) int
		DeliveryID  func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	DeliveryChannelResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	DeliveryResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	DeliveryType struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Delivery    func(childComplexity int) int
		DeliveryID  func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	DeliveryTypeResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Mutation struct {
		CreateDelivery            func(childComplexity int, input map[string]interface{}) int
		CreateDeliveryChannel     func(childComplexity int, input map[string]interface{}) int
		CreateDeliveryType        func(childComplexity int, input map[string]interface{}) int
		CreatePerson              func(childComplexity int, input map[string]interface{}) int
		CreateVehicleType         func(childComplexity int, input map[string]interface{}) int
		DeleteAllDeliveries       func(childComplexity int) int
		DeleteAllDeliveryChannels func(childComplexity int) int
		DeleteAllDeliveryTypes    func(childComplexity int) int
		DeleteAllPeople           func(childComplexity int) int
		DeleteAllVehicleTypes     func(childComplexity int) int
		DeleteDelivery            func(childComplexity int, id string) int
		DeleteDeliveryChannel     func(childComplexity int, id string) int
		DeleteDeliveryType        func(childComplexity int, id string) int
		DeletePerson              func(childComplexity int, id string) int
		DeleteVehicleType         func(childComplexity int, id string) int
		UpdateDelivery            func(childComplexity int, id string, input map[string]interface{}) int
		UpdateDeliveryChannel     func(childComplexity int, id string, input map[string]interface{}) int
		UpdateDeliveryType        func(childComplexity int, id string, input map[string]interface{}) int
		UpdatePerson              func(childComplexity int, id string, input map[string]interface{}) int
		UpdateVehicleType         func(childComplexity int, id string, input map[string]interface{}) int
	}

	Person struct {
		AvatarURL                    func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Deliver                      func(childComplexity int) int
		Deliveries                   func(childComplexity int) int
		DeliveriesConnection         func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) int
		DeliveriesIds                func(childComplexity int) int
		DeliveriesReceived           func(childComplexity int) int
		DeliveriesReceivedConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) int
		DeliveriesReceivedIds        func(childComplexity int) int
		DeliveriesSent               func(childComplexity int) int
		DeliveriesSentConnection     func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) int
		DeliveriesSentIds            func(childComplexity int) int
		Description                  func(childComplexity int) int
		DisplayName                  func(childComplexity int) int
		DocumentNo                   func(childComplexity int) int
		Email                        func(childComplexity int) int
		FirstName                    func(childComplexity int) int
		ID                           func(childComplexity int) int
		LastName                     func(childComplexity int) int
		Location                     func(childComplexity int) int
		NickName                     func(childComplexity int) int
		Phone                        func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		UserID                       func(childComplexity int) int
	}

	PersonResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Query struct {
		Deliveries         func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) int
		Delivery           func(childComplexity int, id *string, q *string, filter *DeliveryFilterType) int
		DeliveryChannel    func(childComplexity int, id *string, q *string, filter *DeliveryChannelFilterType) int
		DeliveryChannels   func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliveryChannelSortType, filter *DeliveryChannelFilterType) int
		DeliveryType       func(childComplexity int, id *string, q *string, filter *DeliveryTypeFilterType) int
		DeliveryTypes      func(childComplexity int, offset *int, limit *int, q *string, sort []*DeliveryTypeSortType, filter *DeliveryTypeFilterType) int
		People             func(childComplexity int, offset *int, limit *int, q *string, sort []*PersonSortType, filter *PersonFilterType) int
		Person             func(childComplexity int, id *string, q *string, filter *PersonFilterType) int
		VehicleType        func(childComplexity int, id *string, q *string, filter *VehicleTypeFilterType) int
		VehicleTypes       func(childComplexity int, offset *int, limit *int, q *string, sort []*VehicleTypeSortType, filter *VehicleTypeFilterType) int
		__resolve__service func(childComplexity int) int
	}

	VehicleType struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Delivery    func(childComplexity int) int
		DeliveryID  func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	VehicleTypeResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type DeliveryResolver interface {
	Sender(ctx context.Context, obj *Delivery) (*Person, error)
	Receiver(ctx context.Context, obj *Delivery) (*Person, error)
	Deliver(ctx context.Context, obj *Delivery) (*Person, error)
	VehicleType(ctx context.Context, obj *Delivery) (*VehicleType, error)
	DeliveryType(ctx context.Context, obj *Delivery) (*DeliveryType, error)
	DeliveryChannel(ctx context.Context, obj *Delivery) (*DeliveryChannel, error)

	Instructions(ctx context.Context, obj *Delivery) (*string, error)
}
type DeliveryChannelResolver interface {
	Delivery(ctx context.Context, obj *DeliveryChannel) (*Delivery, error)
}
type DeliveryChannelResultTypeResolver interface {
	Items(ctx context.Context, obj *DeliveryChannelResultType) ([]*DeliveryChannel, error)
	Count(ctx context.Context, obj *DeliveryChannelResultType) (int, error)
}
type DeliveryResultTypeResolver interface {
	Items(ctx context.Context, obj *DeliveryResultType) ([]*Delivery, error)
	Count(ctx context.Context, obj *DeliveryResultType) (int, error)
}
type DeliveryTypeResolver interface {
	Delivery(ctx context.Context, obj *DeliveryType) (*Delivery, error)
}
type DeliveryTypeResultTypeResolver interface {
	Items(ctx context.Context, obj *DeliveryTypeResultType) ([]*DeliveryType, error)
	Count(ctx context.Context, obj *DeliveryTypeResultType) (int, error)
}
type MutationResolver interface {
	CreateDelivery(ctx context.Context, input map[string]interface{}) (*Delivery, error)
	UpdateDelivery(ctx context.Context, id string, input map[string]interface{}) (*Delivery, error)
	DeleteDelivery(ctx context.Context, id string) (*Delivery, error)
	DeleteAllDeliveries(ctx context.Context) (bool, error)
	CreatePerson(ctx context.Context, input map[string]interface{}) (*Person, error)
	UpdatePerson(ctx context.Context, id string, input map[string]interface{}) (*Person, error)
	DeletePerson(ctx context.Context, id string) (*Person, error)
	DeleteAllPeople(ctx context.Context) (bool, error)
	CreateDeliveryType(ctx context.Context, input map[string]interface{}) (*DeliveryType, error)
	UpdateDeliveryType(ctx context.Context, id string, input map[string]interface{}) (*DeliveryType, error)
	DeleteDeliveryType(ctx context.Context, id string) (*DeliveryType, error)
	DeleteAllDeliveryTypes(ctx context.Context) (bool, error)
	CreateDeliveryChannel(ctx context.Context, input map[string]interface{}) (*DeliveryChannel, error)
	UpdateDeliveryChannel(ctx context.Context, id string, input map[string]interface{}) (*DeliveryChannel, error)
	DeleteDeliveryChannel(ctx context.Context, id string) (*DeliveryChannel, error)
	DeleteAllDeliveryChannels(ctx context.Context) (bool, error)
	CreateVehicleType(ctx context.Context, input map[string]interface{}) (*VehicleType, error)
	UpdateVehicleType(ctx context.Context, id string, input map[string]interface{}) (*VehicleType, error)
	DeleteVehicleType(ctx context.Context, id string) (*VehicleType, error)
	DeleteAllVehicleTypes(ctx context.Context) (bool, error)
}
type PersonResolver interface {
	Deliveries(ctx context.Context, obj *Person) ([]*Delivery, error)
	DeliveriesSent(ctx context.Context, obj *Person) ([]*Delivery, error)
	DeliveriesReceived(ctx context.Context, obj *Person) ([]*Delivery, error)

	DeliveriesIds(ctx context.Context, obj *Person) ([]string, error)
	DeliveriesConnection(ctx context.Context, obj *Person, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) (*DeliveryResultType, error)
	DeliveriesSentIds(ctx context.Context, obj *Person) ([]string, error)
	DeliveriesSentConnection(ctx context.Context, obj *Person, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) (*DeliveryResultType, error)
	DeliveriesReceivedIds(ctx context.Context, obj *Person) ([]string, error)
	DeliveriesReceivedConnection(ctx context.Context, obj *Person, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) (*DeliveryResultType, error)
}
type PersonResultTypeResolver interface {
	Items(ctx context.Context, obj *PersonResultType) ([]*Person, error)
	Count(ctx context.Context, obj *PersonResultType) (int, error)
}
type QueryResolver interface {
	Delivery(ctx context.Context, id *string, q *string, filter *DeliveryFilterType) (*Delivery, error)
	Deliveries(ctx context.Context, offset *int, limit *int, q *string, sort []*DeliverySortType, filter *DeliveryFilterType) (*DeliveryResultType, error)
	Person(ctx context.Context, id *string, q *string, filter *PersonFilterType) (*Person, error)
	People(ctx context.Context, offset *int, limit *int, q *string, sort []*PersonSortType, filter *PersonFilterType) (*PersonResultType, error)
	DeliveryType(ctx context.Context, id *string, q *string, filter *DeliveryTypeFilterType) (*DeliveryType, error)
	DeliveryTypes(ctx context.Context, offset *int, limit *int, q *string, sort []*DeliveryTypeSortType, filter *DeliveryTypeFilterType) (*DeliveryTypeResultType, error)
	DeliveryChannel(ctx context.Context, id *string, q *string, filter *DeliveryChannelFilterType) (*DeliveryChannel, error)
	DeliveryChannels(ctx context.Context, offset *int, limit *int, q *string, sort []*DeliveryChannelSortType, filter *DeliveryChannelFilterType) (*DeliveryChannelResultType, error)
	VehicleType(ctx context.Context, id *string, q *string, filter *VehicleTypeFilterType) (*VehicleType, error)
	VehicleTypes(ctx context.Context, offset *int, limit *int, q *string, sort []*VehicleTypeSortType, filter *VehicleTypeFilterType) (*VehicleTypeResultType, error)
}
type VehicleTypeResolver interface {
	Delivery(ctx context.Context, obj *VehicleType) (*Delivery, error)
}
type VehicleTypeResultTypeResolver interface {
	Items(ctx context.Context, obj *VehicleTypeResultType) ([]*VehicleType, error)
	Count(ctx context.Context, obj *VehicleTypeResultType) (int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Delivery.collectAddress":
		if e.complexity.Delivery.CollectAddress == nil {
			break
		}

		return e.complexity.Delivery.CollectAddress(childComplexity), true

	case "Delivery.collectDateTime":
		if e.complexity.Delivery.CollectDateTime == nil {
			break
		}

		return e.complexity.Delivery.CollectDateTime(childComplexity), true

	case "Delivery.collectPoint":
		if e.complexity.Delivery.CollectPoint == nil {
			break
		}

		return e.complexity.Delivery.CollectPoint(childComplexity), true

	case "Delivery.completed":
		if e.complexity.Delivery.Completed == nil {
			break
		}

		return e.complexity.Delivery.Completed(childComplexity), true

	case "Delivery.createdAt":
		if e.complexity.Delivery.CreatedAt == nil {
			break
		}

		return e.complexity.Delivery.CreatedAt(childComplexity), true

	case "Delivery.createdBy":
		if e.complexity.Delivery.CreatedBy == nil {
			break
		}

		return e.complexity.Delivery.CreatedBy(childComplexity), true

	case "Delivery.deliver":
		if e.complexity.Delivery.Deliver == nil {
			break
		}

		return e.complexity.Delivery.Deliver(childComplexity), true

	case "Delivery.deliverId":
		if e.complexity.Delivery.DeliverID == nil {
			break
		}

		return e.complexity.Delivery.DeliverID(childComplexity), true

	case "Delivery.deliveryChannel":
		if e.complexity.Delivery.DeliveryChannel == nil {
			break
		}

		return e.complexity.Delivery.DeliveryChannel(childComplexity), true

	case "Delivery.deliveryChannelId":
		if e.complexity.Delivery.DeliveryChannelID == nil {
			break
		}

		return e.complexity.Delivery.DeliveryChannelID(childComplexity), true

	case "Delivery.deliveryType":
		if e.complexity.Delivery.DeliveryType == nil {
			break
		}

		return e.complexity.Delivery.DeliveryType(childComplexity), true

	case "Delivery.deliveryTypeId":
		if e.complexity.Delivery.DeliveryTypeID == nil {
			break
		}

		return e.complexity.Delivery.DeliveryTypeID(childComplexity), true

	case "Delivery.dropAddress":
		if e.complexity.Delivery.DropAddress == nil {
			break
		}

		return e.complexity.Delivery.DropAddress(childComplexity), true

	case "Delivery.dropDateTime":
		if e.complexity.Delivery.DropDateTime == nil {
			break
		}

		return e.complexity.Delivery.DropDateTime(childComplexity), true

	case "Delivery.dropPoint":
		if e.complexity.Delivery.DropPoint == nil {
			break
		}

		return e.complexity.Delivery.DropPoint(childComplexity), true

	case "Delivery.expectedCost":
		if e.complexity.Delivery.ExpectedCost == nil {
			break
		}

		return e.complexity.Delivery.ExpectedCost(childComplexity), true

	case "Delivery.expectedDistance":
		if e.complexity.Delivery.ExpectedDistance == nil {
			break
		}

		return e.complexity.Delivery.ExpectedDistance(childComplexity), true

	case "Delivery.id":
		if e.complexity.Delivery.ID == nil {
			break
		}

		return e.complexity.Delivery.ID(childComplexity), true

	case "Delivery.instructions":
		if e.complexity.Delivery.Instructions == nil {
			break
		}

		return e.complexity.Delivery.Instructions(childComplexity), true

	case "Delivery.paymentId":
		if e.complexity.Delivery.PaymentID == nil {
			break
		}

		return e.complexity.Delivery.PaymentID(childComplexity), true

	case "Delivery.paymentOnDeliver":
		if e.complexity.Delivery.PaymentOnDeliver == nil {
			break
		}

		return e.complexity.Delivery.PaymentOnDeliver(childComplexity), true

	case "Delivery.paymentTotal":
		if e.complexity.Delivery.PaymentTotal == nil {
			break
		}

		return e.complexity.Delivery.PaymentTotal(childComplexity), true

	case "Delivery.receiver":
		if e.complexity.Delivery.Receiver == nil {
			break
		}

		return e.complexity.Delivery.Receiver(childComplexity), true

	case "Delivery.receiverId":
		if e.complexity.Delivery.ReceiverID == nil {
			break
		}

		return e.complexity.Delivery.ReceiverID(childComplexity), true

	case "Delivery.sender":
		if e.complexity.Delivery.Sender == nil {
			break
		}

		return e.complexity.Delivery.Sender(childComplexity), true

	case "Delivery.senderId":
		if e.complexity.Delivery.SenderID == nil {
			break
		}

		return e.complexity.Delivery.SenderID(childComplexity), true

	case "Delivery.smsToken":
		if e.complexity.Delivery.SmsToken == nil {
			break
		}

		return e.complexity.Delivery.SmsToken(childComplexity), true

	case "Delivery.status":
		if e.complexity.Delivery.Status == nil {
			break
		}

		return e.complexity.Delivery.Status(childComplexity), true

	case "Delivery.updatedAt":
		if e.complexity.Delivery.UpdatedAt == nil {
			break
		}

		return e.complexity.Delivery.UpdatedAt(childComplexity), true

	case "Delivery.updatedBy":
		if e.complexity.Delivery.UpdatedBy == nil {
			break
		}

		return e.complexity.Delivery.UpdatedBy(childComplexity), true

	case "Delivery.vehicleType":
		if e.complexity.Delivery.VehicleType == nil {
			break
		}

		return e.complexity.Delivery.VehicleType(childComplexity), true

	case "Delivery.vehicleTypeId":
		if e.complexity.Delivery.VehicleTypeID == nil {
			break
		}

		return e.complexity.Delivery.VehicleTypeID(childComplexity), true

	case "DeliveryChannel.createdAt":
		if e.complexity.DeliveryChannel.CreatedAt == nil {
			break
		}

		return e.complexity.DeliveryChannel.CreatedAt(childComplexity), true

	case "DeliveryChannel.createdBy":
		if e.complexity.DeliveryChannel.CreatedBy == nil {
			break
		}

		return e.complexity.DeliveryChannel.CreatedBy(childComplexity), true

	case "DeliveryChannel.delivery":
		if e.complexity.DeliveryChannel.Delivery == nil {
			break
		}

		return e.complexity.DeliveryChannel.Delivery(childComplexity), true

	case "DeliveryChannel.deliveryId":
		if e.complexity.DeliveryChannel.DeliveryID == nil {
			break
		}

		return e.complexity.DeliveryChannel.DeliveryID(childComplexity), true

	case "DeliveryChannel.description":
		if e.complexity.DeliveryChannel.Description == nil {
			break
		}

		return e.complexity.DeliveryChannel.Description(childComplexity), true

	case "DeliveryChannel.id":
		if e.complexity.DeliveryChannel.ID == nil {
			break
		}

		return e.complexity.DeliveryChannel.ID(childComplexity), true

	case "DeliveryChannel.name":
		if e.complexity.DeliveryChannel.Name == nil {
			break
		}

		return e.complexity.DeliveryChannel.Name(childComplexity), true

	case "DeliveryChannel.updatedAt":
		if e.complexity.DeliveryChannel.UpdatedAt == nil {
			break
		}

		return e.complexity.DeliveryChannel.UpdatedAt(childComplexity), true

	case "DeliveryChannel.updatedBy":
		if e.complexity.DeliveryChannel.UpdatedBy == nil {
			break
		}

		return e.complexity.DeliveryChannel.UpdatedBy(childComplexity), true

	case "DeliveryChannelResultType.count":
		if e.complexity.DeliveryChannelResultType.Count == nil {
			break
		}

		return e.complexity.DeliveryChannelResultType.Count(childComplexity), true

	case "DeliveryChannelResultType.items":
		if e.complexity.DeliveryChannelResultType.Items == nil {
			break
		}

		return e.complexity.DeliveryChannelResultType.Items(childComplexity), true

	case "DeliveryResultType.count":
		if e.complexity.DeliveryResultType.Count == nil {
			break
		}

		return e.complexity.DeliveryResultType.Count(childComplexity), true

	case "DeliveryResultType.items":
		if e.complexity.DeliveryResultType.Items == nil {
			break
		}

		return e.complexity.DeliveryResultType.Items(childComplexity), true

	case "DeliveryType.createdAt":
		if e.complexity.DeliveryType.CreatedAt == nil {
			break
		}

		return e.complexity.DeliveryType.CreatedAt(childComplexity), true

	case "DeliveryType.createdBy":
		if e.complexity.DeliveryType.CreatedBy == nil {
			break
		}

		return e.complexity.DeliveryType.CreatedBy(childComplexity), true

	case "DeliveryType.delivery":
		if e.complexity.DeliveryType.Delivery == nil {
			break
		}

		return e.complexity.DeliveryType.Delivery(childComplexity), true

	case "DeliveryType.deliveryId":
		if e.complexity.DeliveryType.DeliveryID == nil {
			break
		}

		return e.complexity.DeliveryType.DeliveryID(childComplexity), true

	case "DeliveryType.description":
		if e.complexity.DeliveryType.Description == nil {
			break
		}

		return e.complexity.DeliveryType.Description(childComplexity), true

	case "DeliveryType.id":
		if e.complexity.DeliveryType.ID == nil {
			break
		}

		return e.complexity.DeliveryType.ID(childComplexity), true

	case "DeliveryType.name":
		if e.complexity.DeliveryType.Name == nil {
			break
		}

		return e.complexity.DeliveryType.Name(childComplexity), true

	case "DeliveryType.updatedAt":
		if e.complexity.DeliveryType.UpdatedAt == nil {
			break
		}

		return e.complexity.DeliveryType.UpdatedAt(childComplexity), true

	case "DeliveryType.updatedBy":
		if e.complexity.DeliveryType.UpdatedBy == nil {
			break
		}

		return e.complexity.DeliveryType.UpdatedBy(childComplexity), true

	case "DeliveryTypeResultType.count":
		if e.complexity.DeliveryTypeResultType.Count == nil {
			break
		}

		return e.complexity.DeliveryTypeResultType.Count(childComplexity), true

	case "DeliveryTypeResultType.items":
		if e.complexity.DeliveryTypeResultType.Items == nil {
			break
		}

		return e.complexity.DeliveryTypeResultType.Items(childComplexity), true

	case "Mutation.createDelivery":
		if e.complexity.Mutation.CreateDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_createDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDelivery(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createDeliveryChannel":
		if e.complexity.Mutation.CreateDeliveryChannel == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryChannel(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createDeliveryType":
		if e.complexity.Mutation.CreateDeliveryType == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryType(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createPerson":
		if e.complexity.Mutation.CreatePerson == nil {
			break
		}

		args, err := ec.field_Mutation_createPerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePerson(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createVehicleType":
		if e.complexity.Mutation.CreateVehicleType == nil {
			break
		}

		args, err := ec.field_Mutation_createVehicleType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVehicleType(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.deleteAllDeliveries":
		if e.complexity.Mutation.DeleteAllDeliveries == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllDeliveries(childComplexity), true

	case "Mutation.deleteAllDeliveryChannels":
		if e.complexity.Mutation.DeleteAllDeliveryChannels == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllDeliveryChannels(childComplexity), true

	case "Mutation.deleteAllDeliveryTypes":
		if e.complexity.Mutation.DeleteAllDeliveryTypes == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllDeliveryTypes(childComplexity), true

	case "Mutation.deleteAllPeople":
		if e.complexity.Mutation.DeleteAllPeople == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllPeople(childComplexity), true

	case "Mutation.deleteAllVehicleTypes":
		if e.complexity.Mutation.DeleteAllVehicleTypes == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllVehicleTypes(childComplexity), true

	case "Mutation.deleteDelivery":
		if e.complexity.Mutation.DeleteDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDelivery(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDeliveryChannel":
		if e.complexity.Mutation.DeleteDeliveryChannel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeliveryChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeliveryChannel(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDeliveryType":
		if e.complexity.Mutation.DeleteDeliveryType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeliveryType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeliveryType(childComplexity, args["id"].(string)), true

	case "Mutation.deletePerson":
		if e.complexity.Mutation.DeletePerson == nil {
			break
		}

		args, err := ec.field_Mutation_deletePerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePerson(childComplexity, args["id"].(string)), true

	case "Mutation.deleteVehicleType":
		if e.complexity.Mutation.DeleteVehicleType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVehicleType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleType(childComplexity, args["id"].(string)), true

	case "Mutation.updateDelivery":
		if e.complexity.Mutation.UpdateDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_updateDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDelivery(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateDeliveryChannel":
		if e.complexity.Mutation.UpdateDeliveryChannel == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryChannel(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateDeliveryType":
		if e.complexity.Mutation.UpdateDeliveryType == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryType(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updatePerson":
		if e.complexity.Mutation.UpdatePerson == nil {
			break
		}

		args, err := ec.field_Mutation_updatePerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePerson(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateVehicleType":
		if e.complexity.Mutation.UpdateVehicleType == nil {
			break
		}

		args, err := ec.field_Mutation_updateVehicleType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleType(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Person.avatarURL":
		if e.complexity.Person.AvatarURL == nil {
			break
		}

		return e.complexity.Person.AvatarURL(childComplexity), true

	case "Person.createdAt":
		if e.complexity.Person.CreatedAt == nil {
			break
		}

		return e.complexity.Person.CreatedAt(childComplexity), true

	case "Person.createdBy":
		if e.complexity.Person.CreatedBy == nil {
			break
		}

		return e.complexity.Person.CreatedBy(childComplexity), true

	case "Person.deliver":
		if e.complexity.Person.Deliver == nil {
			break
		}

		return e.complexity.Person.Deliver(childComplexity), true

	case "Person.deliveries":
		if e.complexity.Person.Deliveries == nil {
			break
		}

		return e.complexity.Person.Deliveries(childComplexity), true

	case "Person.deliveriesConnection":
		if e.complexity.Person.DeliveriesConnection == nil {
			break
		}

		args, err := ec.field_Person_deliveriesConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Person.DeliveriesConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType)), true

	case "Person.deliveriesIds":
		if e.complexity.Person.DeliveriesIds == nil {
			break
		}

		return e.complexity.Person.DeliveriesIds(childComplexity), true

	case "Person.deliveriesReceived":
		if e.complexity.Person.DeliveriesReceived == nil {
			break
		}

		return e.complexity.Person.DeliveriesReceived(childComplexity), true

	case "Person.deliveriesReceivedConnection":
		if e.complexity.Person.DeliveriesReceivedConnection == nil {
			break
		}

		args, err := ec.field_Person_deliveriesReceivedConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Person.DeliveriesReceivedConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType)), true

	case "Person.deliveriesReceivedIds":
		if e.complexity.Person.DeliveriesReceivedIds == nil {
			break
		}

		return e.complexity.Person.DeliveriesReceivedIds(childComplexity), true

	case "Person.deliveriesSent":
		if e.complexity.Person.DeliveriesSent == nil {
			break
		}

		return e.complexity.Person.DeliveriesSent(childComplexity), true

	case "Person.deliveriesSentConnection":
		if e.complexity.Person.DeliveriesSentConnection == nil {
			break
		}

		args, err := ec.field_Person_deliveriesSentConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Person.DeliveriesSentConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType)), true

	case "Person.deliveriesSentIds":
		if e.complexity.Person.DeliveriesSentIds == nil {
			break
		}

		return e.complexity.Person.DeliveriesSentIds(childComplexity), true

	case "Person.description":
		if e.complexity.Person.Description == nil {
			break
		}

		return e.complexity.Person.Description(childComplexity), true

	case "Person.displayName":
		if e.complexity.Person.DisplayName == nil {
			break
		}

		return e.complexity.Person.DisplayName(childComplexity), true

	case "Person.documentNo":
		if e.complexity.Person.DocumentNo == nil {
			break
		}

		return e.complexity.Person.DocumentNo(childComplexity), true

	case "Person.email":
		if e.complexity.Person.Email == nil {
			break
		}

		return e.complexity.Person.Email(childComplexity), true

	case "Person.firstName":
		if e.complexity.Person.FirstName == nil {
			break
		}

		return e.complexity.Person.FirstName(childComplexity), true

	case "Person.id":
		if e.complexity.Person.ID == nil {
			break
		}

		return e.complexity.Person.ID(childComplexity), true

	case "Person.lastName":
		if e.complexity.Person.LastName == nil {
			break
		}

		return e.complexity.Person.LastName(childComplexity), true

	case "Person.location":
		if e.complexity.Person.Location == nil {
			break
		}

		return e.complexity.Person.Location(childComplexity), true

	case "Person.nickName":
		if e.complexity.Person.NickName == nil {
			break
		}

		return e.complexity.Person.NickName(childComplexity), true

	case "Person.phone":
		if e.complexity.Person.Phone == nil {
			break
		}

		return e.complexity.Person.Phone(childComplexity), true

	case "Person.updatedAt":
		if e.complexity.Person.UpdatedAt == nil {
			break
		}

		return e.complexity.Person.UpdatedAt(childComplexity), true

	case "Person.updatedBy":
		if e.complexity.Person.UpdatedBy == nil {
			break
		}

		return e.complexity.Person.UpdatedBy(childComplexity), true

	case "Person.userId":
		if e.complexity.Person.UserID == nil {
			break
		}

		return e.complexity.Person.UserID(childComplexity), true

	case "PersonResultType.count":
		if e.complexity.PersonResultType.Count == nil {
			break
		}

		return e.complexity.PersonResultType.Count(childComplexity), true

	case "PersonResultType.items":
		if e.complexity.PersonResultType.Items == nil {
			break
		}

		return e.complexity.PersonResultType.Items(childComplexity), true

	case "Query.deliveries":
		if e.complexity.Query.Deliveries == nil {
			break
		}

		args, err := ec.field_Query_deliveries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deliveries(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType)), true

	case "Query.delivery":
		if e.complexity.Query.Delivery == nil {
			break
		}

		args, err := ec.field_Query_delivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Delivery(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryFilterType)), true

	case "Query.deliveryChannel":
		if e.complexity.Query.DeliveryChannel == nil {
			break
		}

		args, err := ec.field_Query_deliveryChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryChannel(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryChannelFilterType)), true

	case "Query.deliveryChannels":
		if e.complexity.Query.DeliveryChannels == nil {
			break
		}

		args, err := ec.field_Query_deliveryChannels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryChannels(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliveryChannelSortType), args["filter"].(*DeliveryChannelFilterType)), true

	case "Query.deliveryType":
		if e.complexity.Query.DeliveryType == nil {
			break
		}

		args, err := ec.field_Query_deliveryType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryType(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryTypeFilterType)), true

	case "Query.deliveryTypes":
		if e.complexity.Query.DeliveryTypes == nil {
			break
		}

		args, err := ec.field_Query_deliveryTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryTypes(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliveryTypeSortType), args["filter"].(*DeliveryTypeFilterType)), true

	case "Query.people":
		if e.complexity.Query.People == nil {
			break
		}

		args, err := ec.field_Query_people_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.People(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PersonSortType), args["filter"].(*PersonFilterType)), true

	case "Query.person":
		if e.complexity.Query.Person == nil {
			break
		}

		args, err := ec.field_Query_person_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Person(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*PersonFilterType)), true

	case "Query.vehicleType":
		if e.complexity.Query.VehicleType == nil {
			break
		}

		args, err := ec.field_Query_vehicleType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleType(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*VehicleTypeFilterType)), true

	case "Query.vehicleTypes":
		if e.complexity.Query.VehicleTypes == nil {
			break
		}

		args, err := ec.field_Query_vehicleTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleTypes(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*VehicleTypeSortType), args["filter"].(*VehicleTypeFilterType)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "VehicleType.createdAt":
		if e.complexity.VehicleType.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleType.CreatedAt(childComplexity), true

	case "VehicleType.createdBy":
		if e.complexity.VehicleType.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleType.CreatedBy(childComplexity), true

	case "VehicleType.delivery":
		if e.complexity.VehicleType.Delivery == nil {
			break
		}

		return e.complexity.VehicleType.Delivery(childComplexity), true

	case "VehicleType.deliveryId":
		if e.complexity.VehicleType.DeliveryID == nil {
			break
		}

		return e.complexity.VehicleType.DeliveryID(childComplexity), true

	case "VehicleType.description":
		if e.complexity.VehicleType.Description == nil {
			break
		}

		return e.complexity.VehicleType.Description(childComplexity), true

	case "VehicleType.id":
		if e.complexity.VehicleType.ID == nil {
			break
		}

		return e.complexity.VehicleType.ID(childComplexity), true

	case "VehicleType.name":
		if e.complexity.VehicleType.Name == nil {
			break
		}

		return e.complexity.VehicleType.Name(childComplexity), true

	case "VehicleType.updatedAt":
		if e.complexity.VehicleType.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleType.UpdatedAt(childComplexity), true

	case "VehicleType.updatedBy":
		if e.complexity.VehicleType.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleType.UpdatedBy(childComplexity), true

	case "VehicleTypeResultType.count":
		if e.complexity.VehicleTypeResultType.Count == nil {
			break
		}

		return e.complexity.VehicleTypeResultType.Count(childComplexity), true

	case "VehicleTypeResultType.items":
		if e.complexity.VehicleTypeResultType.Items == nil {
			break
		}

		return e.complexity.VehicleTypeResultType.Items(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: `# This schema is generated, please don't update it manually

scalar Time

schema {
  query: Query
  mutation: Mutation
}

type Query {
  _service: _Service!
  delivery(id: ID, q: String, filter: DeliveryFilterType): Delivery
  deliveries(offset: Int, limit: Int = 30, q: String, sort: [DeliverySortType!], filter: DeliveryFilterType): DeliveryResultType!
  person(id: ID, q: String, filter: PersonFilterType): Person
  people(offset: Int, limit: Int = 30, q: String, sort: [PersonSortType!], filter: PersonFilterType): PersonResultType!
  deliveryType(id: ID, q: String, filter: DeliveryTypeFilterType): DeliveryType
  deliveryTypes(offset: Int, limit: Int = 30, q: String, sort: [DeliveryTypeSortType!], filter: DeliveryTypeFilterType): DeliveryTypeResultType!
  deliveryChannel(id: ID, q: String, filter: DeliveryChannelFilterType): DeliveryChannel
  deliveryChannels(offset: Int, limit: Int = 30, q: String, sort: [DeliveryChannelSortType!], filter: DeliveryChannelFilterType): DeliveryChannelResultType!
  vehicleType(id: ID, q: String, filter: VehicleTypeFilterType): VehicleType
  vehicleTypes(offset: Int, limit: Int = 30, q: String, sort: [VehicleTypeSortType!], filter: VehicleTypeFilterType): VehicleTypeResultType!
}

type Mutation {
  createDelivery(input: DeliveryCreateInput!): Delivery!
  updateDelivery(id: ID!, input: DeliveryUpdateInput!): Delivery!
  deleteDelivery(id: ID!): Delivery!
  deleteAllDeliveries: Boolean!
  createPerson(input: PersonCreateInput!): Person!
  updatePerson(id: ID!, input: PersonUpdateInput!): Person!
  deletePerson(id: ID!): Person!
  deleteAllPeople: Boolean!
  createDeliveryType(input: DeliveryTypeCreateInput!): DeliveryType!
  updateDeliveryType(id: ID!, input: DeliveryTypeUpdateInput!): DeliveryType!
  deleteDeliveryType(id: ID!): DeliveryType!
  deleteAllDeliveryTypes: Boolean!
  createDeliveryChannel(input: DeliveryChannelCreateInput!): DeliveryChannel!
  updateDeliveryChannel(id: ID!, input: DeliveryChannelUpdateInput!): DeliveryChannel!
  deleteDeliveryChannel(id: ID!): DeliveryChannel!
  deleteAllDeliveryChannels: Boolean!
  createVehicleType(input: VehicleTypeCreateInput!): VehicleType!
  updateVehicleType(id: ID!, input: VehicleTypeUpdateInput!): VehicleType!
  deleteVehicleType(id: ID!): VehicleType!
  deleteAllVehicleTypes: Boolean!
}

enum ObjectSortType {
  ASC
  DESC
}

type Delivery {
  id: ID!
  sender: Person
  receiver: Person
  deliver: Person
  vehicleType: VehicleType!
  deliveryType: DeliveryType!
  deliveryChannel: DeliveryChannel!
  paymentId: ID
  paymentTotal: Float
  paymentOnDeliver: Boolean
  collectDateTime: Time
  collectAddress: String
  collectPoint: String
  dropDateTime: Time
  dropAddress: String
  dropPoint: String
  expectedDistance: String
  expectedCost: Float
  completed: Boolean
  smsToken: String
  status: String
  instructions: String
  senderId: ID
  receiverId: ID
  deliverId: ID
  vehicleTypeId: ID
  deliveryTypeId: ID
  deliveryChannelId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type Person {
  id: ID!
  deliver: Boolean
  email: String!
  phone: String
  documentNo: String
  avatarURL: String
  displayName: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  deliveries: [Delivery!]!
  deliveriesSent: [Delivery!]!
  deliveriesReceived: [Delivery!]!
  userId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  deliveriesIds: [ID!]!
  deliveriesConnection(offset: Int, limit: Int = 30, q: String, sort: [DeliverySortType!], filter: DeliveryFilterType): DeliveryResultType!
  deliveriesSentIds: [ID!]!
  deliveriesSentConnection(offset: Int, limit: Int = 30, q: String, sort: [DeliverySortType!], filter: DeliveryFilterType): DeliveryResultType!
  deliveriesReceivedIds: [ID!]!
  deliveriesReceivedConnection(offset: Int, limit: Int = 30, q: String, sort: [DeliverySortType!], filter: DeliveryFilterType): DeliveryResultType!
}

type DeliveryType {
  id: ID!
  name: String!
  description: String
  delivery: Delivery
  deliveryId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type DeliveryChannel {
  id: ID!
  name: String!
  description: String
  delivery: Delivery
  deliveryId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type VehicleType {
  id: ID!
  name: String!
  description: String
  delivery: Delivery
  deliveryId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

input DeliveryCreateInput {
  id: ID
  paymentId: ID
  paymentTotal: Float
  paymentOnDeliver: Boolean
  collectDateTime: Time
  collectAddress: String
  collectPoint: String
  dropDateTime: Time
  dropAddress: String
  dropPoint: String
  expectedDistance: String
  expectedCost: Float
  completed: Boolean
  smsToken: String
  status: String
  senderId: ID
  receiverId: ID
  deliverId: ID
  vehicleTypeId: ID
  deliveryTypeId: ID
  deliveryChannelId: ID
}

input DeliveryUpdateInput {
  paymentId: ID
  paymentTotal: Float
  paymentOnDeliver: Boolean
  collectDateTime: Time
  collectAddress: String
  collectPoint: String
  dropDateTime: Time
  dropAddress: String
  dropPoint: String
  expectedDistance: String
  expectedCost: Float
  completed: Boolean
  smsToken: String
  status: String
  senderId: ID
  receiverId: ID
  deliverId: ID
  vehicleTypeId: ID
  deliveryTypeId: ID
  deliveryChannelId: ID
}

input DeliverySortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  paymentId: ObjectSortType
  paymentIdMin: ObjectSortType
  paymentIdMax: ObjectSortType
  paymentTotal: ObjectSortType
  paymentTotalMin: ObjectSortType
  paymentTotalMax: ObjectSortType
  paymentTotalAvg: ObjectSortType
  paymentOnDeliver: ObjectSortType
  paymentOnDeliverMin: ObjectSortType
  paymentOnDeliverMax: ObjectSortType
  collectDateTime: ObjectSortType
  collectDateTimeMin: ObjectSortType
  collectDateTimeMax: ObjectSortType
  collectAddress: ObjectSortType
  collectAddressMin: ObjectSortType
  collectAddressMax: ObjectSortType
  collectPoint: ObjectSortType
  collectPointMin: ObjectSortType
  collectPointMax: ObjectSortType
  dropDateTime: ObjectSortType
  dropDateTimeMin: ObjectSortType
  dropDateTimeMax: ObjectSortType
  dropAddress: ObjectSortType
  dropAddressMin: ObjectSortType
  dropAddressMax: ObjectSortType
  dropPoint: ObjectSortType
  dropPointMin: ObjectSortType
  dropPointMax: ObjectSortType
  expectedDistance: ObjectSortType
  expectedDistanceMin: ObjectSortType
  expectedDistanceMax: ObjectSortType
  expectedCost: ObjectSortType
  expectedCostMin: ObjectSortType
  expectedCostMax: ObjectSortType
  expectedCostAvg: ObjectSortType
  completed: ObjectSortType
  completedMin: ObjectSortType
  completedMax: ObjectSortType
  smsToken: ObjectSortType
  smsTokenMin: ObjectSortType
  smsTokenMax: ObjectSortType
  status: ObjectSortType
  statusMin: ObjectSortType
  statusMax: ObjectSortType
  senderId: ObjectSortType
  senderIdMin: ObjectSortType
  senderIdMax: ObjectSortType
  receiverId: ObjectSortType
  receiverIdMin: ObjectSortType
  receiverIdMax: ObjectSortType
  deliverId: ObjectSortType
  deliverIdMin: ObjectSortType
  deliverIdMax: ObjectSortType
  vehicleTypeId: ObjectSortType
  vehicleTypeIdMin: ObjectSortType
  vehicleTypeIdMax: ObjectSortType
  deliveryTypeId: ObjectSortType
  deliveryTypeIdMin: ObjectSortType
  deliveryTypeIdMax: ObjectSortType
  deliveryChannelId: ObjectSortType
  deliveryChannelIdMin: ObjectSortType
  deliveryChannelIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  sender: PersonSortType
  receiver: PersonSortType
  deliver: PersonSortType
  vehicleType: VehicleTypeSortType
  deliveryType: DeliveryTypeSortType
  deliveryChannel: DeliveryChannelSortType
}

input DeliveryFilterType {
  AND: [DeliveryFilterType!]
  OR: [DeliveryFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_null: Boolean
  paymentId: ID
  paymentIdMin: ID
  paymentIdMax: ID
  paymentId_ne: ID
  paymentIdMin_ne: ID
  paymentIdMax_ne: ID
  paymentId_gt: ID
  paymentIdMin_gt: ID
  paymentIdMax_gt: ID
  paymentId_lt: ID
  paymentIdMin_lt: ID
  paymentIdMax_lt: ID
  paymentId_gte: ID
  paymentIdMin_gte: ID
  paymentIdMax_gte: ID
  paymentId_lte: ID
  paymentIdMin_lte: ID
  paymentIdMax_lte: ID
  paymentId_in: [ID!]
  paymentIdMin_in: [ID!]
  paymentIdMax_in: [ID!]
  paymentId_null: Boolean
  paymentTotal: Float
  paymentTotalMin: Float
  paymentTotalMax: Float
  paymentTotalAvg: Float
  paymentTotal_ne: Float
  paymentTotalMin_ne: Float
  paymentTotalMax_ne: Float
  paymentTotalAvg_ne: Float
  paymentTotal_gt: Float
  paymentTotalMin_gt: Float
  paymentTotalMax_gt: Float
  paymentTotalAvg_gt: Float
  paymentTotal_lt: Float
  paymentTotalMin_lt: Float
  paymentTotalMax_lt: Float
  paymentTotalAvg_lt: Float
  paymentTotal_gte: Float
  paymentTotalMin_gte: Float
  paymentTotalMax_gte: Float
  paymentTotalAvg_gte: Float
  paymentTotal_lte: Float
  paymentTotalMin_lte: Float
  paymentTotalMax_lte: Float
  paymentTotalAvg_lte: Float
  paymentTotal_in: [Float!]
  paymentTotalMin_in: [Float!]
  paymentTotalMax_in: [Float!]
  paymentTotalAvg_in: [Float!]
  paymentTotal_null: Boolean
  paymentOnDeliver: Boolean
  paymentOnDeliverMin: Boolean
  paymentOnDeliverMax: Boolean
  paymentOnDeliver_ne: Boolean
  paymentOnDeliverMin_ne: Boolean
  paymentOnDeliverMax_ne: Boolean
  paymentOnDeliver_gt: Boolean
  paymentOnDeliverMin_gt: Boolean
  paymentOnDeliverMax_gt: Boolean
  paymentOnDeliver_lt: Boolean
  paymentOnDeliverMin_lt: Boolean
  paymentOnDeliverMax_lt: Boolean
  paymentOnDeliver_gte: Boolean
  paymentOnDeliverMin_gte: Boolean
  paymentOnDeliverMax_gte: Boolean
  paymentOnDeliver_lte: Boolean
  paymentOnDeliverMin_lte: Boolean
  paymentOnDeliverMax_lte: Boolean
  paymentOnDeliver_in: [Boolean!]
  paymentOnDeliverMin_in: [Boolean!]
  paymentOnDeliverMax_in: [Boolean!]
  paymentOnDeliver_null: Boolean
  collectDateTime: Time
  collectDateTimeMin: Time
  collectDateTimeMax: Time
  collectDateTime_ne: Time
  collectDateTimeMin_ne: Time
  collectDateTimeMax_ne: Time
  collectDateTime_gt: Time
  collectDateTimeMin_gt: Time
  collectDateTimeMax_gt: Time
  collectDateTime_lt: Time
  collectDateTimeMin_lt: Time
  collectDateTimeMax_lt: Time
  collectDateTime_gte: Time
  collectDateTimeMin_gte: Time
  collectDateTimeMax_gte: Time
  collectDateTime_lte: Time
  collectDateTimeMin_lte: Time
  collectDateTimeMax_lte: Time
  collectDateTime_in: [Time!]
  collectDateTimeMin_in: [Time!]
  collectDateTimeMax_in: [Time!]
  collectDateTime_null: Boolean
  collectAddress: String
  collectAddressMin: String
  collectAddressMax: String
  collectAddress_ne: String
  collectAddressMin_ne: String
  collectAddressMax_ne: String
  collectAddress_gt: String
  collectAddressMin_gt: String
  collectAddressMax_gt: String
  collectAddress_lt: String
  collectAddressMin_lt: String
  collectAddressMax_lt: String
  collectAddress_gte: String
  collectAddressMin_gte: String
  collectAddressMax_gte: String
  collectAddress_lte: String
  collectAddressMin_lte: String
  collectAddressMax_lte: String
  collectAddress_in: [String!]
  collectAddressMin_in: [String!]
  collectAddressMax_in: [String!]
  collectAddress_like: String
  collectAddressMin_like: String
  collectAddressMax_like: String
  collectAddress_prefix: String
  collectAddressMin_prefix: String
  collectAddressMax_prefix: String
  collectAddress_suffix: String
  collectAddressMin_suffix: String
  collectAddressMax_suffix: String
  collectAddress_null: Boolean
  collectPoint: String
  collectPointMin: String
  collectPointMax: String
  collectPoint_ne: String
  collectPointMin_ne: String
  collectPointMax_ne: String
  collectPoint_gt: String
  collectPointMin_gt: String
  collectPointMax_gt: String
  collectPoint_lt: String
  collectPointMin_lt: String
  collectPointMax_lt: String
  collectPoint_gte: String
  collectPointMin_gte: String
  collectPointMax_gte: String
  collectPoint_lte: String
  collectPointMin_lte: String
  collectPointMax_lte: String
  collectPoint_in: [String!]
  collectPointMin_in: [String!]
  collectPointMax_in: [String!]
  collectPoint_like: String
  collectPointMin_like: String
  collectPointMax_like: String
  collectPoint_prefix: String
  collectPointMin_prefix: String
  collectPointMax_prefix: String
  collectPoint_suffix: String
  collectPointMin_suffix: String
  collectPointMax_suffix: String
  collectPoint_null: Boolean
  dropDateTime: Time
  dropDateTimeMin: Time
  dropDateTimeMax: Time
  dropDateTime_ne: Time
  dropDateTimeMin_ne: Time
  dropDateTimeMax_ne: Time
  dropDateTime_gt: Time
  dropDateTimeMin_gt: Time
  dropDateTimeMax_gt: Time
  dropDateTime_lt: Time
  dropDateTimeMin_lt: Time
  dropDateTimeMax_lt: Time
  dropDateTime_gte: Time
  dropDateTimeMin_gte: Time
  dropDateTimeMax_gte: Time
  dropDateTime_lte: Time
  dropDateTimeMin_lte: Time
  dropDateTimeMax_lte: Time
  dropDateTime_in: [Time!]
  dropDateTimeMin_in: [Time!]
  dropDateTimeMax_in: [Time!]
  dropDateTime_null: Boolean
  dropAddress: String
  dropAddressMin: String
  dropAddressMax: String
  dropAddress_ne: String
  dropAddressMin_ne: String
  dropAddressMax_ne: String
  dropAddress_gt: String
  dropAddressMin_gt: String
  dropAddressMax_gt: String
  dropAddress_lt: String
  dropAddressMin_lt: String
  dropAddressMax_lt: String
  dropAddress_gte: String
  dropAddressMin_gte: String
  dropAddressMax_gte: String
  dropAddress_lte: String
  dropAddressMin_lte: String
  dropAddressMax_lte: String
  dropAddress_in: [String!]
  dropAddressMin_in: [String!]
  dropAddressMax_in: [String!]
  dropAddress_like: String
  dropAddressMin_like: String
  dropAddressMax_like: String
  dropAddress_prefix: String
  dropAddressMin_prefix: String
  dropAddressMax_prefix: String
  dropAddress_suffix: String
  dropAddressMin_suffix: String
  dropAddressMax_suffix: String
  dropAddress_null: Boolean
  dropPoint: String
  dropPointMin: String
  dropPointMax: String
  dropPoint_ne: String
  dropPointMin_ne: String
  dropPointMax_ne: String
  dropPoint_gt: String
  dropPointMin_gt: String
  dropPointMax_gt: String
  dropPoint_lt: String
  dropPointMin_lt: String
  dropPointMax_lt: String
  dropPoint_gte: String
  dropPointMin_gte: String
  dropPointMax_gte: String
  dropPoint_lte: String
  dropPointMin_lte: String
  dropPointMax_lte: String
  dropPoint_in: [String!]
  dropPointMin_in: [String!]
  dropPointMax_in: [String!]
  dropPoint_like: String
  dropPointMin_like: String
  dropPointMax_like: String
  dropPoint_prefix: String
  dropPointMin_prefix: String
  dropPointMax_prefix: String
  dropPoint_suffix: String
  dropPointMin_suffix: String
  dropPointMax_suffix: String
  dropPoint_null: Boolean
  expectedDistance: String
  expectedDistanceMin: String
  expectedDistanceMax: String
  expectedDistance_ne: String
  expectedDistanceMin_ne: String
  expectedDistanceMax_ne: String
  expectedDistance_gt: String
  expectedDistanceMin_gt: String
  expectedDistanceMax_gt: String
  expectedDistance_lt: String
  expectedDistanceMin_lt: String
  expectedDistanceMax_lt: String
  expectedDistance_gte: String
  expectedDistanceMin_gte: String
  expectedDistanceMax_gte: String
  expectedDistance_lte: String
  expectedDistanceMin_lte: String
  expectedDistanceMax_lte: String
  expectedDistance_in: [String!]
  expectedDistanceMin_in: [String!]
  expectedDistanceMax_in: [String!]
  expectedDistance_like: String
  expectedDistanceMin_like: String
  expectedDistanceMax_like: String
  expectedDistance_prefix: String
  expectedDistanceMin_prefix: String
  expectedDistanceMax_prefix: String
  expectedDistance_suffix: String
  expectedDistanceMin_suffix: String
  expectedDistanceMax_suffix: String
  expectedDistance_null: Boolean
  expectedCost: Float
  expectedCostMin: Float
  expectedCostMax: Float
  expectedCostAvg: Float
  expectedCost_ne: Float
  expectedCostMin_ne: Float
  expectedCostMax_ne: Float
  expectedCostAvg_ne: Float
  expectedCost_gt: Float
  expectedCostMin_gt: Float
  expectedCostMax_gt: Float
  expectedCostAvg_gt: Float
  expectedCost_lt: Float
  expectedCostMin_lt: Float
  expectedCostMax_lt: Float
  expectedCostAvg_lt: Float
  expectedCost_gte: Float
  expectedCostMin_gte: Float
  expectedCostMax_gte: Float
  expectedCostAvg_gte: Float
  expectedCost_lte: Float
  expectedCostMin_lte: Float
  expectedCostMax_lte: Float
  expectedCostAvg_lte: Float
  expectedCost_in: [Float!]
  expectedCostMin_in: [Float!]
  expectedCostMax_in: [Float!]
  expectedCostAvg_in: [Float!]
  expectedCost_null: Boolean
  completed: Boolean
  completedMin: Boolean
  completedMax: Boolean
  completed_ne: Boolean
  completedMin_ne: Boolean
  completedMax_ne: Boolean
  completed_gt: Boolean
  completedMin_gt: Boolean
  completedMax_gt: Boolean
  completed_lt: Boolean
  completedMin_lt: Boolean
  completedMax_lt: Boolean
  completed_gte: Boolean
  completedMin_gte: Boolean
  completedMax_gte: Boolean
  completed_lte: Boolean
  completedMin_lte: Boolean
  completedMax_lte: Boolean
  completed_in: [Boolean!]
  completedMin_in: [Boolean!]
  completedMax_in: [Boolean!]
  completed_null: Boolean
  smsToken: String
  smsTokenMin: String
  smsTokenMax: String
  smsToken_ne: String
  smsTokenMin_ne: String
  smsTokenMax_ne: String
  smsToken_gt: String
  smsTokenMin_gt: String
  smsTokenMax_gt: String
  smsToken_lt: String
  smsTokenMin_lt: String
  smsTokenMax_lt: String
  smsToken_gte: String
  smsTokenMin_gte: String
  smsTokenMax_gte: String
  smsToken_lte: String
  smsTokenMin_lte: String
  smsTokenMax_lte: String
  smsToken_in: [String!]
  smsTokenMin_in: [String!]
  smsTokenMax_in: [String!]
  smsToken_like: String
  smsTokenMin_like: String
  smsTokenMax_like: String
  smsToken_prefix: String
  smsTokenMin_prefix: String
  smsTokenMax_prefix: String
  smsToken_suffix: String
  smsTokenMin_suffix: String
  smsTokenMax_suffix: String
  smsToken_null: Boolean
  status: String
  statusMin: String
  statusMax: String
  status_ne: String
  statusMin_ne: String
  statusMax_ne: String
  status_gt: String
  statusMin_gt: String
  statusMax_gt: String
  status_lt: String
  statusMin_lt: String
  statusMax_lt: String
  status_gte: String
  statusMin_gte: String
  statusMax_gte: String
  status_lte: String
  statusMin_lte: String
  statusMax_lte: String
  status_in: [String!]
  statusMin_in: [String!]
  statusMax_in: [String!]
  status_like: String
  statusMin_like: String
  statusMax_like: String
  status_prefix: String
  statusMin_prefix: String
  statusMax_prefix: String
  status_suffix: String
  statusMin_suffix: String
  statusMax_suffix: String
  status_null: Boolean
  senderId: ID
  senderIdMin: ID
  senderIdMax: ID
  senderId_ne: ID
  senderIdMin_ne: ID
  senderIdMax_ne: ID
  senderId_gt: ID
  senderIdMin_gt: ID
  senderIdMax_gt: ID
  senderId_lt: ID
  senderIdMin_lt: ID
  senderIdMax_lt: ID
  senderId_gte: ID
  senderIdMin_gte: ID
  senderIdMax_gte: ID
  senderId_lte: ID
  senderIdMin_lte: ID
  senderIdMax_lte: ID
  senderId_in: [ID!]
  senderIdMin_in: [ID!]
  senderIdMax_in: [ID!]
  senderId_null: Boolean
  receiverId: ID
  receiverIdMin: ID
  receiverIdMax: ID
  receiverId_ne: ID
  receiverIdMin_ne: ID
  receiverIdMax_ne: ID
  receiverId_gt: ID
  receiverIdMin_gt: ID
  receiverIdMax_gt: ID
  receiverId_lt: ID
  receiverIdMin_lt: ID
  receiverIdMax_lt: ID
  receiverId_gte: ID
  receiverIdMin_gte: ID
  receiverIdMax_gte: ID
  receiverId_lte: ID
  receiverIdMin_lte: ID
  receiverIdMax_lte: ID
  receiverId_in: [ID!]
  receiverIdMin_in: [ID!]
  receiverIdMax_in: [ID!]
  receiverId_null: Boolean
  deliverId: ID
  deliverIdMin: ID
  deliverIdMax: ID
  deliverId_ne: ID
  deliverIdMin_ne: ID
  deliverIdMax_ne: ID
  deliverId_gt: ID
  deliverIdMin_gt: ID
  deliverIdMax_gt: ID
  deliverId_lt: ID
  deliverIdMin_lt: ID
  deliverIdMax_lt: ID
  deliverId_gte: ID
  deliverIdMin_gte: ID
  deliverIdMax_gte: ID
  deliverId_lte: ID
  deliverIdMin_lte: ID
  deliverIdMax_lte: ID
  deliverId_in: [ID!]
  deliverIdMin_in: [ID!]
  deliverIdMax_in: [ID!]
  deliverId_null: Boolean
  vehicleTypeId: ID
  vehicleTypeIdMin: ID
  vehicleTypeIdMax: ID
  vehicleTypeId_ne: ID
  vehicleTypeIdMin_ne: ID
  vehicleTypeIdMax_ne: ID
  vehicleTypeId_gt: ID
  vehicleTypeIdMin_gt: ID
  vehicleTypeIdMax_gt: ID
  vehicleTypeId_lt: ID
  vehicleTypeIdMin_lt: ID
  vehicleTypeIdMax_lt: ID
  vehicleTypeId_gte: ID
  vehicleTypeIdMin_gte: ID
  vehicleTypeIdMax_gte: ID
  vehicleTypeId_lte: ID
  vehicleTypeIdMin_lte: ID
  vehicleTypeIdMax_lte: ID
  vehicleTypeId_in: [ID!]
  vehicleTypeIdMin_in: [ID!]
  vehicleTypeIdMax_in: [ID!]
  vehicleTypeId_null: Boolean
  deliveryTypeId: ID
  deliveryTypeIdMin: ID
  deliveryTypeIdMax: ID
  deliveryTypeId_ne: ID
  deliveryTypeIdMin_ne: ID
  deliveryTypeIdMax_ne: ID
  deliveryTypeId_gt: ID
  deliveryTypeIdMin_gt: ID
  deliveryTypeIdMax_gt: ID
  deliveryTypeId_lt: ID
  deliveryTypeIdMin_lt: ID
  deliveryTypeIdMax_lt: ID
  deliveryTypeId_gte: ID
  deliveryTypeIdMin_gte: ID
  deliveryTypeIdMax_gte: ID
  deliveryTypeId_lte: ID
  deliveryTypeIdMin_lte: ID
  deliveryTypeIdMax_lte: ID
  deliveryTypeId_in: [ID!]
  deliveryTypeIdMin_in: [ID!]
  deliveryTypeIdMax_in: [ID!]
  deliveryTypeId_null: Boolean
  deliveryChannelId: ID
  deliveryChannelIdMin: ID
  deliveryChannelIdMax: ID
  deliveryChannelId_ne: ID
  deliveryChannelIdMin_ne: ID
  deliveryChannelIdMax_ne: ID
  deliveryChannelId_gt: ID
  deliveryChannelIdMin_gt: ID
  deliveryChannelIdMax_gt: ID
  deliveryChannelId_lt: ID
  deliveryChannelIdMin_lt: ID
  deliveryChannelIdMax_lt: ID
  deliveryChannelId_gte: ID
  deliveryChannelIdMin_gte: ID
  deliveryChannelIdMax_gte: ID
  deliveryChannelId_lte: ID
  deliveryChannelIdMin_lte: ID
  deliveryChannelIdMax_lte: ID
  deliveryChannelId_in: [ID!]
  deliveryChannelIdMin_in: [ID!]
  deliveryChannelIdMax_in: [ID!]
  deliveryChannelId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_null: Boolean
  sender: PersonFilterType
  receiver: PersonFilterType
  deliver: PersonFilterType
  vehicleType: VehicleTypeFilterType
  deliveryType: DeliveryTypeFilterType
  deliveryChannel: DeliveryChannelFilterType
}

type DeliveryResultType {
  items: [Delivery!]!
  count: Int!
}

input PersonCreateInput {
  id: ID
  deliver: Boolean
  email: String!
  phone: String
  documentNo: String
  avatarURL: String
  displayName: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  userId: ID
  deliveriesIds: [ID!]
  deliveriesSentIds: [ID!]
  deliveriesReceivedIds: [ID!]
}

input PersonUpdateInput {
  deliver: Boolean
  email: String
  phone: String
  documentNo: String
  avatarURL: String
  displayName: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  userId: ID
  deliveriesIds: [ID!]
  deliveriesSentIds: [ID!]
  deliveriesReceivedIds: [ID!]
}

input PersonSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  deliver: ObjectSortType
  deliverMin: ObjectSortType
  deliverMax: ObjectSortType
  email: ObjectSortType
  emailMin: ObjectSortType
  emailMax: ObjectSortType
  phone: ObjectSortType
  phoneMin: ObjectSortType
  phoneMax: ObjectSortType
  documentNo: ObjectSortType
  documentNoMin: ObjectSortType
  documentNoMax: ObjectSortType
  avatarURL: ObjectSortType
  avatarURLMin: ObjectSortType
  avatarURLMax: ObjectSortType
  displayName: ObjectSortType
  displayNameMin: ObjectSortType
  displayNameMax: ObjectSortType
  firstName: ObjectSortType
  firstNameMin: ObjectSortType
  firstNameMax: ObjectSortType
  lastName: ObjectSortType
  lastNameMin: ObjectSortType
  lastNameMax: ObjectSortType
  nickName: ObjectSortType
  nickNameMin: ObjectSortType
  nickNameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  location: ObjectSortType
  locationMin: ObjectSortType
  locationMax: ObjectSortType
  userId: ObjectSortType
  userIdMin: ObjectSortType
  userIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  deliveriesIds: ObjectSortType
  deliveriesIdsMin: ObjectSortType
  deliveriesIdsMax: ObjectSortType
  deliveriesSentIds: ObjectSortType
  deliveriesSentIdsMin: ObjectSortType
  deliveriesSentIdsMax: ObjectSortType
  deliveriesReceivedIds: ObjectSortType
  deliveriesReceivedIdsMin: ObjectSortType
  deliveriesReceivedIdsMax: ObjectSortType
  deliveries: DeliverySortType
  deliveriesSent: DeliverySortType
  deliveriesReceived: DeliverySortType
}

input PersonFilterType {
  AND: [PersonFilterType!]
  OR: [PersonFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_null: Boolean
  deliver: Boolean
  deliverMin: Boolean
  deliverMax: Boolean
  deliver_ne: Boolean
  deliverMin_ne: Boolean
  deliverMax_ne: Boolean
  deliver_gt: Boolean
  deliverMin_gt: Boolean
  deliverMax_gt: Boolean
  deliver_lt: Boolean
  deliverMin_lt: Boolean
  deliverMax_lt: Boolean
  deliver_gte: Boolean
  deliverMin_gte: Boolean
  deliverMax_gte: Boolean
  deliver_lte: Boolean
  deliverMin_lte: Boolean
  deliverMax_lte: Boolean
  deliver_in: [Boolean!]
  deliverMin_in: [Boolean!]
  deliverMax_in: [Boolean!]
  deliver_null: Boolean
  email: String
  emailMin: String
  emailMax: String
  email_ne: String
  emailMin_ne: String
  emailMax_ne: String
  email_gt: String
  emailMin_gt: String
  emailMax_gt: String
  email_lt: String
  emailMin_lt: String
  emailMax_lt: String
  email_gte: String
  emailMin_gte: String
  emailMax_gte: String
  email_lte: String
  emailMin_lte: String
  emailMax_lte: String
  email_in: [String!]
  emailMin_in: [String!]
  emailMax_in: [String!]
  email_like: String
  emailMin_like: String
  emailMax_like: String
  email_prefix: String
  emailMin_prefix: String
  emailMax_prefix: String
  email_suffix: String
  emailMin_suffix: String
  emailMax_suffix: String
  email_null: Boolean
  phone: String
  phoneMin: String
  phoneMax: String
  phone_ne: String
  phoneMin_ne: String
  phoneMax_ne: String
  phone_gt: String
  phoneMin_gt: String
  phoneMax_gt: String
  phone_lt: String
  phoneMin_lt: String
  phoneMax_lt: String
  phone_gte: String
  phoneMin_gte: String
  phoneMax_gte: String
  phone_lte: String
  phoneMin_lte: String
  phoneMax_lte: String
  phone_in: [String!]
  phoneMin_in: [String!]
  phoneMax_in: [String!]
  phone_like: String
  phoneMin_like: String
  phoneMax_like: String
  phone_prefix: String
  phoneMin_prefix: String
  phoneMax_prefix: String
  phone_suffix: String
  phoneMin_suffix: String
  phoneMax_suffix: String
  phone_null: Boolean
  documentNo: String
  documentNoMin: String
  documentNoMax: String
  documentNo_ne: String
  documentNoMin_ne: String
  documentNoMax_ne: String
  documentNo_gt: String
  documentNoMin_gt: String
  documentNoMax_gt: String
  documentNo_lt: String
  documentNoMin_lt: String
  documentNoMax_lt: String
  documentNo_gte: String
  documentNoMin_gte: String
  documentNoMax_gte: String
  documentNo_lte: String
  documentNoMin_lte: String
  documentNoMax_lte: String
  documentNo_in: [String!]
  documentNoMin_in: [String!]
  documentNoMax_in: [String!]
  documentNo_like: String
  documentNoMin_like: String
  documentNoMax_like: String
  documentNo_prefix: String
  documentNoMin_prefix: String
  documentNoMax_prefix: String
  documentNo_suffix: String
  documentNoMin_suffix: String
  documentNoMax_suffix: String
  documentNo_null: Boolean
  avatarURL: String
  avatarURLMin: String
  avatarURLMax: String
  avatarURL_ne: String
  avatarURLMin_ne: String
  avatarURLMax_ne: String
  avatarURL_gt: String
  avatarURLMin_gt: String
  avatarURLMax_gt: String
  avatarURL_lt: String
  avatarURLMin_lt: String
  avatarURLMax_lt: String
  avatarURL_gte: String
  avatarURLMin_gte: String
  avatarURLMax_gte: String
  avatarURL_lte: String
  avatarURLMin_lte: String
  avatarURLMax_lte: String
  avatarURL_in: [String!]
  avatarURLMin_in: [String!]
  avatarURLMax_in: [String!]
  avatarURL_like: String
  avatarURLMin_like: String
  avatarURLMax_like: String
  avatarURL_prefix: String
  avatarURLMin_prefix: String
  avatarURLMax_prefix: String
  avatarURL_suffix: String
  avatarURLMin_suffix: String
  avatarURLMax_suffix: String
  avatarURL_null: Boolean
  displayName: String
  displayNameMin: String
  displayNameMax: String
  displayName_ne: String
  displayNameMin_ne: String
  displayNameMax_ne: String
  displayName_gt: String
  displayNameMin_gt: String
  displayNameMax_gt: String
  displayName_lt: String
  displayNameMin_lt: String
  displayNameMax_lt: String
  displayName_gte: String
  displayNameMin_gte: String
  displayNameMax_gte: String
  displayName_lte: String
  displayNameMin_lte: String
  displayNameMax_lte: String
  displayName_in: [String!]
  displayNameMin_in: [String!]
  displayNameMax_in: [String!]
  displayName_like: String
  displayNameMin_like: String
  displayNameMax_like: String
  displayName_prefix: String
  displayNameMin_prefix: String
  displayNameMax_prefix: String
  displayName_suffix: String
  displayNameMin_suffix: String
  displayNameMax_suffix: String
  displayName_null: Boolean
  firstName: String
  firstNameMin: String
  firstNameMax: String
  firstName_ne: String
  firstNameMin_ne: String
  firstNameMax_ne: String
  firstName_gt: String
  firstNameMin_gt: String
  firstNameMax_gt: String
  firstName_lt: String
  firstNameMin_lt: String
  firstNameMax_lt: String
  firstName_gte: String
  firstNameMin_gte: String
  firstNameMax_gte: String
  firstName_lte: String
  firstNameMin_lte: String
  firstNameMax_lte: String
  firstName_in: [String!]
  firstNameMin_in: [String!]
  firstNameMax_in: [String!]
  firstName_like: String
  firstNameMin_like: String
  firstNameMax_like: String
  firstName_prefix: String
  firstNameMin_prefix: String
  firstNameMax_prefix: String
  firstName_suffix: String
  firstNameMin_suffix: String
  firstNameMax_suffix: String
  firstName_null: Boolean
  lastName: String
  lastNameMin: String
  lastNameMax: String
  lastName_ne: String
  lastNameMin_ne: String
  lastNameMax_ne: String
  lastName_gt: String
  lastNameMin_gt: String
  lastNameMax_gt: String
  lastName_lt: String
  lastNameMin_lt: String
  lastNameMax_lt: String
  lastName_gte: String
  lastNameMin_gte: String
  lastNameMax_gte: String
  lastName_lte: String
  lastNameMin_lte: String
  lastNameMax_lte: String
  lastName_in: [String!]
  lastNameMin_in: [String!]
  lastNameMax_in: [String!]
  lastName_like: String
  lastNameMin_like: String
  lastNameMax_like: String
  lastName_prefix: String
  lastNameMin_prefix: String
  lastNameMax_prefix: String
  lastName_suffix: String
  lastNameMin_suffix: String
  lastNameMax_suffix: String
  lastName_null: Boolean
  nickName: String
  nickNameMin: String
  nickNameMax: String
  nickName_ne: String
  nickNameMin_ne: String
  nickNameMax_ne: String
  nickName_gt: String
  nickNameMin_gt: String
  nickNameMax_gt: String
  nickName_lt: String
  nickNameMin_lt: String
  nickNameMax_lt: String
  nickName_gte: String
  nickNameMin_gte: String
  nickNameMax_gte: String
  nickName_lte: String
  nickNameMin_lte: String
  nickNameMax_lte: String
  nickName_in: [String!]
  nickNameMin_in: [String!]
  nickNameMax_in: [String!]
  nickName_like: String
  nickNameMin_like: String
  nickNameMax_like: String
  nickName_prefix: String
  nickNameMin_prefix: String
  nickNameMax_prefix: String
  nickName_suffix: String
  nickNameMin_suffix: String
  nickNameMax_suffix: String
  nickName_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  location: String
  locationMin: String
  locationMax: String
  location_ne: String
  locationMin_ne: String
  locationMax_ne: String
  location_gt: String
  locationMin_gt: String
  locationMax_gt: String
  location_lt: String
  locationMin_lt: String
  locationMax_lt: String
  location_gte: String
  locationMin_gte: String
  locationMax_gte: String
  location_lte: String
  locationMin_lte: String
  locationMax_lte: String
  location_in: [String!]
  locationMin_in: [String!]
  locationMax_in: [String!]
  location_like: String
  locationMin_like: String
  locationMax_like: String
  location_prefix: String
  locationMin_prefix: String
  locationMax_prefix: String
  location_suffix: String
  locationMin_suffix: String
  locationMax_suffix: String
  location_null: Boolean
  userId: ID
  userIdMin: ID
  userIdMax: ID
  userId_ne: ID
  userIdMin_ne: ID
  userIdMax_ne: ID
  userId_gt: ID
  userIdMin_gt: ID
  userIdMax_gt: ID
  userId_lt: ID
  userIdMin_lt: ID
  userIdMax_lt: ID
  userId_gte: ID
  userIdMin_gte: ID
  userIdMax_gte: ID
  userId_lte: ID
  userIdMin_lte: ID
  userIdMax_lte: ID
  userId_in: [ID!]
  userIdMin_in: [ID!]
  userIdMax_in: [ID!]
  userId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_null: Boolean
  deliveries: DeliveryFilterType
  deliveriesSent: DeliveryFilterType
  deliveriesReceived: DeliveryFilterType
}

type PersonResultType {
  items: [Person!]!
  count: Int!
}

input DeliveryTypeCreateInput {
  id: ID
  name: String!
  description: String
  deliveryId: ID
}

input DeliveryTypeUpdateInput {
  name: String
  description: String
  deliveryId: ID
}

input DeliveryTypeSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  deliveryId: ObjectSortType
  deliveryIdMin: ObjectSortType
  deliveryIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  delivery: DeliverySortType
}

input DeliveryTypeFilterType {
  AND: [DeliveryTypeFilterType!]
  OR: [DeliveryTypeFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  deliveryId: ID
  deliveryIdMin: ID
  deliveryIdMax: ID
  deliveryId_ne: ID
  deliveryIdMin_ne: ID
  deliveryIdMax_ne: ID
  deliveryId_gt: ID
  deliveryIdMin_gt: ID
  deliveryIdMax_gt: ID
  deliveryId_lt: ID
  deliveryIdMin_lt: ID
  deliveryIdMax_lt: ID
  deliveryId_gte: ID
  deliveryIdMin_gte: ID
  deliveryIdMax_gte: ID
  deliveryId_lte: ID
  deliveryIdMin_lte: ID
  deliveryIdMax_lte: ID
  deliveryId_in: [ID!]
  deliveryIdMin_in: [ID!]
  deliveryIdMax_in: [ID!]
  deliveryId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_null: Boolean
  delivery: DeliveryFilterType
}

type DeliveryTypeResultType {
  items: [DeliveryType!]!
  count: Int!
}

input DeliveryChannelCreateInput {
  id: ID
  name: String!
  description: String
  deliveryId: ID
}

input DeliveryChannelUpdateInput {
  name: String
  description: String
  deliveryId: ID
}

input DeliveryChannelSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  deliveryId: ObjectSortType
  deliveryIdMin: ObjectSortType
  deliveryIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  delivery: DeliverySortType
}

input DeliveryChannelFilterType {
  AND: [DeliveryChannelFilterType!]
  OR: [DeliveryChannelFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  deliveryId: ID
  deliveryIdMin: ID
  deliveryIdMax: ID
  deliveryId_ne: ID
  deliveryIdMin_ne: ID
  deliveryIdMax_ne: ID
  deliveryId_gt: ID
  deliveryIdMin_gt: ID
  deliveryIdMax_gt: ID
  deliveryId_lt: ID
  deliveryIdMin_lt: ID
  deliveryIdMax_lt: ID
  deliveryId_gte: ID
  deliveryIdMin_gte: ID
  deliveryIdMax_gte: ID
  deliveryId_lte: ID
  deliveryIdMin_lte: ID
  deliveryIdMax_lte: ID
  deliveryId_in: [ID!]
  deliveryIdMin_in: [ID!]
  deliveryIdMax_in: [ID!]
  deliveryId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_null: Boolean
  delivery: DeliveryFilterType
}

type DeliveryChannelResultType {
  items: [DeliveryChannel!]!
  count: Int!
}

input VehicleTypeCreateInput {
  id: ID
  name: String!
  description: String
  deliveryId: ID
}

input VehicleTypeUpdateInput {
  name: String
  description: String
  deliveryId: ID
}

input VehicleTypeSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  deliveryId: ObjectSortType
  deliveryIdMin: ObjectSortType
  deliveryIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  delivery: DeliverySortType
}

input VehicleTypeFilterType {
  AND: [VehicleTypeFilterType!]
  OR: [VehicleTypeFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  deliveryId: ID
  deliveryIdMin: ID
  deliveryIdMax: ID
  deliveryId_ne: ID
  deliveryIdMin_ne: ID
  deliveryIdMax_ne: ID
  deliveryId_gt: ID
  deliveryIdMin_gt: ID
  deliveryIdMax_gt: ID
  deliveryId_lt: ID
  deliveryIdMin_lt: ID
  deliveryIdMax_lt: ID
  deliveryId_gte: ID
  deliveryIdMin_gte: ID
  deliveryIdMax_gte: ID
  deliveryId_lte: ID
  deliveryIdMin_lte: ID
  deliveryIdMax_lte: ID
  deliveryId_in: [ID!]
  deliveryIdMin_in: [ID!]
  deliveryIdMax_in: [ID!]
  deliveryId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_null: Boolean
  delivery: DeliveryFilterType
}

type VehicleTypeResultType {
  items: [VehicleType!]!
  count: Int!
}

type _Service {
  sdl: String
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createDeliveryChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeliveryChannelCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeliveryType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeliveryTypeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeliveryCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPersonCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVehicleType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNVehicleTypeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeliveryChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeliveryType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVehicleType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNDeliveryChannelUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNDeliveryTypeUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNDeliveryUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPersonUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVehicleType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNVehicleTypeUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Person_deliveriesConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliverySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliverySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Person_deliveriesReceivedConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliverySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliverySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Person_deliveriesSentConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliverySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliverySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deliveries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliverySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliverySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_deliveryChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *DeliveryChannelFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalODeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_deliveryChannels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliveryChannelSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliveryChannelSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryChannelFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_deliveryType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *DeliveryTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalODeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_deliveryTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*DeliveryTypeSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalODeliveryTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *DeliveryTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalODeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_delivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *DeliveryFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_people_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PersonSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPersonSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PersonFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_person_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *PersonFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_vehicleType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *VehicleTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_vehicleTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*VehicleTypeSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOVehicleTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *VehicleTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Delivery_id(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_sender(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().Sender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_receiver(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().Receiver(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliver(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().Deliver(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_vehicleType(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().VehicleType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*VehicleType)
	fc.Result = res
	return ec.marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliveryType(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().DeliveryType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryType)
	fc.Result = res
	return ec.marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliveryChannel(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().DeliveryChannel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannel)
	fc.Result = res
	return ec.marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_paymentId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_paymentTotal(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_paymentOnDeliver(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentOnDeliver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_collectDateTime(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_collectAddress(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_collectPoint(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_dropDateTime(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DropDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_dropAddress(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DropAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_dropPoint(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DropPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_expectedDistance(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_expectedCost(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_completed(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_smsToken(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_status(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_instructions(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Delivery().Instructions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_senderId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_receiverId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliverId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_vehicleTypeId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliveryTypeId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_deliveryChannelId(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_createdAt(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Delivery_createdBy(ctx context.Context, field graphql.CollectedField, obj *Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Delivery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_id(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_name(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_description(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_delivery(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryChannel().Delivery(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalODelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_deliveryId(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_createdAt(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_updatedBy(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannel_createdBy(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannelResultType_items(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannelResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannelResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryChannelResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*DeliveryChannel)
	fc.Result = res
	return ec.marshalNDeliveryChannel2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryChannelResultType_count(ctx context.Context, field graphql.CollectedField, obj *DeliveryChannelResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryChannelResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryChannelResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResultType_items(ctx context.Context, field graphql.CollectedField, obj *DeliveryResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResultType_count(ctx context.Context, field graphql.CollectedField, obj *DeliveryResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_id(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_name(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_description(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_delivery(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryType().Delivery(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalODelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_deliveryId(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_createdAt(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryType_createdBy(ctx context.Context, field graphql.CollectedField, obj *DeliveryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryTypeResultType_items(ctx context.Context, field graphql.CollectedField, obj *DeliveryTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryTypeResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*DeliveryType)
	fc.Result = res
	return ec.marshalNDeliveryType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryTypeResultType_count(ctx context.Context, field graphql.CollectedField, obj *DeliveryTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeliveryTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryTypeResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDelivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDelivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDelivery(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDelivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDelivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDelivery(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDelivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDelivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDelivery(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllDeliveries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllDeliveries(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePerson(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePerson(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePerson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePerson(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPeople(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPeople(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDeliveryType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDeliveryType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryType(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryType)
	fc.Result = res
	return ec.marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDeliveryType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDeliveryType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryType(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryType)
	fc.Result = res
	return ec.marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDeliveryType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDeliveryType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeliveryType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryType)
	fc.Result = res
	return ec.marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllDeliveryTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllDeliveryTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDeliveryChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDeliveryChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryChannel(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannel)
	fc.Result = res
	return ec.marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDeliveryChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDeliveryChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryChannel(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannel)
	fc.Result = res
	return ec.marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDeliveryChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDeliveryChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeliveryChannel(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannel)
	fc.Result = res
	return ec.marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllDeliveryChannels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllDeliveryChannels(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createVehicleType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createVehicleType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVehicleType(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*VehicleType)
	fc.Result = res
	return ec.marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVehicleType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVehicleType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleType(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*VehicleType)
	fc.Result = res
	return ec.marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteVehicleType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteVehicleType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*VehicleType)
	fc.Result = res
	return ec.marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllVehicleTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllVehicleTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_id(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliver(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_email(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_phone(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_documentNo(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_avatarURL(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_displayName(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_firstName(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_lastName(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_nickName(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NickName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_description(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_location(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveries(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().Deliveries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesSent(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesSent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesReceived(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesReceived(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Delivery)
	fc.Result = res
	return ec.marshalNDelivery2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_userId(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_createdAt(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_createdBy(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesIds(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesConnection(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Person_deliveriesConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryResultType)
	fc.Result = res
	return ec.marshalNDeliveryResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesSentIds(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesSentIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesSentConnection(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Person_deliveriesSentConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesSentConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryResultType)
	fc.Result = res
	return ec.marshalNDeliveryResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesReceivedIds(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesReceivedIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_deliveriesReceivedConnection(ctx context.Context, field graphql.CollectedField, obj *Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Person_deliveriesReceivedConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Person().DeliveriesReceivedConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryResultType)
	fc.Result = res
	return ec.marshalNDeliveryResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonResultType_items(ctx context.Context, field graphql.CollectedField, obj *PersonResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PersonResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Person)
	fc.Result = res
	return ec.marshalNPerson2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonResultType_count(ctx context.Context, field graphql.CollectedField, obj *PersonResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PersonResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_delivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_delivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Delivery(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalODelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deliveries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deliveries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Deliveries(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliverySortType), args["filter"].(*DeliveryFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryResultType)
	fc.Result = res
	return ec.marshalNDeliveryResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_person(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_person_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Person(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*PersonFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_people(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_people_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().People(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PersonSortType), args["filter"].(*PersonFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PersonResultType)
	fc.Result = res
	return ec.marshalNPersonResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deliveryType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deliveryType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeliveryType(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeliveryType)
	fc.Result = res
	return ec.marshalODeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deliveryTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deliveryTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeliveryTypes(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliveryTypeSortType), args["filter"].(*DeliveryTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryTypeResultType)
	fc.Result = res
	return ec.marshalNDeliveryTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deliveryChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deliveryChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeliveryChannel(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*DeliveryChannelFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannel)
	fc.Result = res
	return ec.marshalODeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deliveryChannels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deliveryChannels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeliveryChannels(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*DeliveryChannelSortType), args["filter"].(*DeliveryChannelFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeliveryChannelResultType)
	fc.Result = res
	return ec.marshalNDeliveryChannelResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicleType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicleType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleType(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*VehicleTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*VehicleType)
	fc.Result = res
	return ec.marshalOVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicleTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicleTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleTypes(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*VehicleTypeSortType), args["filter"].(*VehicleTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*VehicleTypeResultType)
	fc.Result = res
	return ec.marshalNVehicleTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_id(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_name(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_description(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_delivery(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VehicleType().Delivery(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Delivery)
	fc.Result = res
	return ec.marshalODelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_deliveryId(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_createdAt(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleType_createdBy(ctx context.Context, field graphql.CollectedField, obj *VehicleType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleTypeResultType_items(ctx context.Context, field graphql.CollectedField, obj *VehicleTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VehicleTypeResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*VehicleType)
	fc.Result = res
	return ec.marshalNVehicleType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleTypeResultType_count(ctx context.Context, field graphql.CollectedField, obj *VehicleTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VehicleTypeResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDeliveryChannelFilterType(ctx context.Context, obj interface{}) (DeliveryChannelFilterType, error) {
	var it DeliveryChannelFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalODeliveryChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalODeliveryChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_ne"))
			it.DeliveryIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_ne"))
			it.DeliveryIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_ne"))
			it.DeliveryIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gt"))
			it.DeliveryIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gt"))
			it.DeliveryIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gt"))
			it.DeliveryIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lt"))
			it.DeliveryIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lt"))
			it.DeliveryIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lt"))
			it.DeliveryIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gte"))
			it.DeliveryIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gte"))
			it.DeliveryIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gte"))
			it.DeliveryIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lte"))
			it.DeliveryIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lte"))
			it.DeliveryIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lte"))
			it.DeliveryIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_in"))
			it.DeliveryIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_in"))
			it.DeliveryIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_in"))
			it.DeliveryIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_null"))
			it.DeliveryIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryChannelSortType(ctx context.Context, obj interface{}) (DeliveryChannelSortType, error) {
	var it DeliveryChannelSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryFilterType(ctx context.Context, obj interface{}) (DeliveryFilterType, error) {
	var it DeliveryFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalODeliveryFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalODeliveryFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_ne"))
			it.PaymentIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_ne"))
			it.PaymentIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_ne"))
			it.PaymentIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gt"))
			it.PaymentIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gt"))
			it.PaymentIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gt"))
			it.PaymentIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lt"))
			it.PaymentIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lt"))
			it.PaymentIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lt"))
			it.PaymentIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gte"))
			it.PaymentIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gte"))
			it.PaymentIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gte"))
			it.PaymentIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lte"))
			it.PaymentIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lte"))
			it.PaymentIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lte"))
			it.PaymentIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_in"))
			it.PaymentIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_in"))
			it.PaymentIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_in"))
			it.PaymentIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_null"))
			it.PaymentIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal"))
			it.PaymentTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin"))
			it.PaymentTotalMin, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax"))
			it.PaymentTotalMax, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg"))
			it.PaymentTotalAvg, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_ne"))
			it.PaymentTotalNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_ne"))
			it.PaymentTotalMinNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_ne"))
			it.PaymentTotalMaxNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_ne"))
			it.PaymentTotalAvgNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_gt"))
			it.PaymentTotalGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_gt"))
			it.PaymentTotalMinGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_gt"))
			it.PaymentTotalMaxGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_gt"))
			it.PaymentTotalAvgGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_lt"))
			it.PaymentTotalLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_lt"))
			it.PaymentTotalMinLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_lt"))
			it.PaymentTotalMaxLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_lt"))
			it.PaymentTotalAvgLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_gte"))
			it.PaymentTotalGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_gte"))
			it.PaymentTotalMinGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_gte"))
			it.PaymentTotalMaxGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_gte"))
			it.PaymentTotalAvgGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_lte"))
			it.PaymentTotalLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_lte"))
			it.PaymentTotalMinLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_lte"))
			it.PaymentTotalMaxLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_lte"))
			it.PaymentTotalAvgLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_in"))
			it.PaymentTotalIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin_in"))
			it.PaymentTotalMinIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax_in"))
			it.PaymentTotalMaxIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg_in"))
			it.PaymentTotalAvgIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal_null"))
			it.PaymentTotalNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver"))
			it.PaymentOnDeliver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin"))
			it.PaymentOnDeliverMin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax"))
			it.PaymentOnDeliverMax, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_ne"))
			it.PaymentOnDeliverNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_ne"))
			it.PaymentOnDeliverMinNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_ne"))
			it.PaymentOnDeliverMaxNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_gt"))
			it.PaymentOnDeliverGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_gt"))
			it.PaymentOnDeliverMinGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_gt"))
			it.PaymentOnDeliverMaxGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_lt"))
			it.PaymentOnDeliverLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_lt"))
			it.PaymentOnDeliverMinLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_lt"))
			it.PaymentOnDeliverMaxLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_gte"))
			it.PaymentOnDeliverGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_gte"))
			it.PaymentOnDeliverMinGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_gte"))
			it.PaymentOnDeliverMaxGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_lte"))
			it.PaymentOnDeliverLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_lte"))
			it.PaymentOnDeliverMinLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_lte"))
			it.PaymentOnDeliverMaxLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_in"))
			it.PaymentOnDeliverIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin_in"))
			it.PaymentOnDeliverMinIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax_in"))
			it.PaymentOnDeliverMaxIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver_null"))
			it.PaymentOnDeliverNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime"))
			it.CollectDateTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin"))
			it.CollectDateTimeMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax"))
			it.CollectDateTimeMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_ne"))
			it.CollectDateTimeNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_ne"))
			it.CollectDateTimeMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_ne"))
			it.CollectDateTimeMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_gt"))
			it.CollectDateTimeGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_gt"))
			it.CollectDateTimeMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_gt"))
			it.CollectDateTimeMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_lt"))
			it.CollectDateTimeLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_lt"))
			it.CollectDateTimeMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_lt"))
			it.CollectDateTimeMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_gte"))
			it.CollectDateTimeGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_gte"))
			it.CollectDateTimeMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_gte"))
			it.CollectDateTimeMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_lte"))
			it.CollectDateTimeLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_lte"))
			it.CollectDateTimeMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_lte"))
			it.CollectDateTimeMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_in"))
			it.CollectDateTimeIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin_in"))
			it.CollectDateTimeMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax_in"))
			it.CollectDateTimeMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime_null"))
			it.CollectDateTimeNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress"))
			it.CollectAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin"))
			it.CollectAddressMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax"))
			it.CollectAddressMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_ne"))
			it.CollectAddressNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_ne"))
			it.CollectAddressMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_ne"))
			it.CollectAddressMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_gt"))
			it.CollectAddressGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_gt"))
			it.CollectAddressMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_gt"))
			it.CollectAddressMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_lt"))
			it.CollectAddressLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_lt"))
			it.CollectAddressMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_lt"))
			it.CollectAddressMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_gte"))
			it.CollectAddressGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_gte"))
			it.CollectAddressMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_gte"))
			it.CollectAddressMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_lte"))
			it.CollectAddressLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_lte"))
			it.CollectAddressMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_lte"))
			it.CollectAddressMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_in"))
			it.CollectAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_in"))
			it.CollectAddressMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_in"))
			it.CollectAddressMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_like"))
			it.CollectAddressLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_like"))
			it.CollectAddressMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_like"))
			it.CollectAddressMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_prefix"))
			it.CollectAddressPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_prefix"))
			it.CollectAddressMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_prefix"))
			it.CollectAddressMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_suffix"))
			it.CollectAddressSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin_suffix"))
			it.CollectAddressMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax_suffix"))
			it.CollectAddressMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress_null"))
			it.CollectAddressNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint"))
			it.CollectPoint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin"))
			it.CollectPointMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax"))
			it.CollectPointMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_ne"))
			it.CollectPointNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_ne"))
			it.CollectPointMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_ne"))
			it.CollectPointMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_gt"))
			it.CollectPointGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_gt"))
			it.CollectPointMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_gt"))
			it.CollectPointMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_lt"))
			it.CollectPointLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_lt"))
			it.CollectPointMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_lt"))
			it.CollectPointMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_gte"))
			it.CollectPointGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_gte"))
			it.CollectPointMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_gte"))
			it.CollectPointMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_lte"))
			it.CollectPointLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_lte"))
			it.CollectPointMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_lte"))
			it.CollectPointMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_in"))
			it.CollectPointIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_in"))
			it.CollectPointMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_in"))
			it.CollectPointMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_like"))
			it.CollectPointLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_like"))
			it.CollectPointMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_like"))
			it.CollectPointMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_prefix"))
			it.CollectPointPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_prefix"))
			it.CollectPointMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_prefix"))
			it.CollectPointMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_suffix"))
			it.CollectPointSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin_suffix"))
			it.CollectPointMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax_suffix"))
			it.CollectPointMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint_null"))
			it.CollectPointNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime"))
			it.DropDateTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin"))
			it.DropDateTimeMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax"))
			it.DropDateTimeMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_ne"))
			it.DropDateTimeNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_ne"))
			it.DropDateTimeMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_ne"))
			it.DropDateTimeMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_gt"))
			it.DropDateTimeGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_gt"))
			it.DropDateTimeMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_gt"))
			it.DropDateTimeMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_lt"))
			it.DropDateTimeLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_lt"))
			it.DropDateTimeMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_lt"))
			it.DropDateTimeMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_gte"))
			it.DropDateTimeGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_gte"))
			it.DropDateTimeMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_gte"))
			it.DropDateTimeMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_lte"))
			it.DropDateTimeLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_lte"))
			it.DropDateTimeMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_lte"))
			it.DropDateTimeMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_in"))
			it.DropDateTimeIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin_in"))
			it.DropDateTimeMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax_in"))
			it.DropDateTimeMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime_null"))
			it.DropDateTimeNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress"))
			it.DropAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin"))
			it.DropAddressMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax"))
			it.DropAddressMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_ne"))
			it.DropAddressNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_ne"))
			it.DropAddressMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_ne"))
			it.DropAddressMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_gt"))
			it.DropAddressGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_gt"))
			it.DropAddressMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_gt"))
			it.DropAddressMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_lt"))
			it.DropAddressLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_lt"))
			it.DropAddressMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_lt"))
			it.DropAddressMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_gte"))
			it.DropAddressGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_gte"))
			it.DropAddressMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_gte"))
			it.DropAddressMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_lte"))
			it.DropAddressLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_lte"))
			it.DropAddressMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_lte"))
			it.DropAddressMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_in"))
			it.DropAddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_in"))
			it.DropAddressMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_in"))
			it.DropAddressMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_like"))
			it.DropAddressLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_like"))
			it.DropAddressMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_like"))
			it.DropAddressMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_prefix"))
			it.DropAddressPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_prefix"))
			it.DropAddressMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_prefix"))
			it.DropAddressMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_suffix"))
			it.DropAddressSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin_suffix"))
			it.DropAddressMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax_suffix"))
			it.DropAddressMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress_null"))
			it.DropAddressNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint"))
			it.DropPoint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin"))
			it.DropPointMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax"))
			it.DropPointMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_ne"))
			it.DropPointNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_ne"))
			it.DropPointMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_ne"))
			it.DropPointMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_gt"))
			it.DropPointGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_gt"))
			it.DropPointMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_gt"))
			it.DropPointMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_lt"))
			it.DropPointLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_lt"))
			it.DropPointMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_lt"))
			it.DropPointMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_gte"))
			it.DropPointGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_gte"))
			it.DropPointMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_gte"))
			it.DropPointMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_lte"))
			it.DropPointLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_lte"))
			it.DropPointMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_lte"))
			it.DropPointMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_in"))
			it.DropPointIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_in"))
			it.DropPointMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_in"))
			it.DropPointMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_like"))
			it.DropPointLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_like"))
			it.DropPointMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_like"))
			it.DropPointMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_prefix"))
			it.DropPointPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_prefix"))
			it.DropPointMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_prefix"))
			it.DropPointMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_suffix"))
			it.DropPointSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin_suffix"))
			it.DropPointMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax_suffix"))
			it.DropPointMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint_null"))
			it.DropPointNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance"))
			it.ExpectedDistance, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin"))
			it.ExpectedDistanceMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax"))
			it.ExpectedDistanceMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_ne"))
			it.ExpectedDistanceNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_ne"))
			it.ExpectedDistanceMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_ne"))
			it.ExpectedDistanceMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_gt"))
			it.ExpectedDistanceGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_gt"))
			it.ExpectedDistanceMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_gt"))
			it.ExpectedDistanceMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_lt"))
			it.ExpectedDistanceLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_lt"))
			it.ExpectedDistanceMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_lt"))
			it.ExpectedDistanceMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_gte"))
			it.ExpectedDistanceGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_gte"))
			it.ExpectedDistanceMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_gte"))
			it.ExpectedDistanceMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_lte"))
			it.ExpectedDistanceLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_lte"))
			it.ExpectedDistanceMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_lte"))
			it.ExpectedDistanceMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_in"))
			it.ExpectedDistanceIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_in"))
			it.ExpectedDistanceMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_in"))
			it.ExpectedDistanceMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_like"))
			it.ExpectedDistanceLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_like"))
			it.ExpectedDistanceMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_like"))
			it.ExpectedDistanceMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_prefix"))
			it.ExpectedDistancePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_prefix"))
			it.ExpectedDistanceMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_prefix"))
			it.ExpectedDistanceMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_suffix"))
			it.ExpectedDistanceSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin_suffix"))
			it.ExpectedDistanceMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax_suffix"))
			it.ExpectedDistanceMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance_null"))
			it.ExpectedDistanceNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost"))
			it.ExpectedCost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin"))
			it.ExpectedCostMin, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax"))
			it.ExpectedCostMax, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg"))
			it.ExpectedCostAvg, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_ne"))
			it.ExpectedCostNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_ne"))
			it.ExpectedCostMinNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_ne"))
			it.ExpectedCostMaxNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_ne"))
			it.ExpectedCostAvgNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_gt"))
			it.ExpectedCostGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_gt"))
			it.ExpectedCostMinGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_gt"))
			it.ExpectedCostMaxGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_gt"))
			it.ExpectedCostAvgGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_lt"))
			it.ExpectedCostLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_lt"))
			it.ExpectedCostMinLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_lt"))
			it.ExpectedCostMaxLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_lt"))
			it.ExpectedCostAvgLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_gte"))
			it.ExpectedCostGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_gte"))
			it.ExpectedCostMinGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_gte"))
			it.ExpectedCostMaxGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_gte"))
			it.ExpectedCostAvgGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_lte"))
			it.ExpectedCostLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_lte"))
			it.ExpectedCostMinLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_lte"))
			it.ExpectedCostMaxLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_lte"))
			it.ExpectedCostAvgLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_in"))
			it.ExpectedCostIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin_in"))
			it.ExpectedCostMinIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax_in"))
			it.ExpectedCostMaxIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg_in"))
			it.ExpectedCostAvgIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost_null"))
			it.ExpectedCostNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed"))
			it.Completed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin"))
			it.CompletedMin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax"))
			it.CompletedMax, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_ne"))
			it.CompletedNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_ne"))
			it.CompletedMinNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_ne"))
			it.CompletedMaxNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_gt"))
			it.CompletedGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_gt"))
			it.CompletedMinGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_gt"))
			it.CompletedMaxGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_lt"))
			it.CompletedLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_lt"))
			it.CompletedMinLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_lt"))
			it.CompletedMaxLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_gte"))
			it.CompletedGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_gte"))
			it.CompletedMinGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_gte"))
			it.CompletedMaxGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_lte"))
			it.CompletedLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_lte"))
			it.CompletedMinLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_lte"))
			it.CompletedMaxLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_in"))
			it.CompletedIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin_in"))
			it.CompletedMinIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax_in"))
			it.CompletedMaxIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed_null"))
			it.CompletedNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken"))
			it.SmsToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin"))
			it.SmsTokenMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax"))
			it.SmsTokenMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_ne"))
			it.SmsTokenNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_ne"))
			it.SmsTokenMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_ne"))
			it.SmsTokenMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_gt"))
			it.SmsTokenGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_gt"))
			it.SmsTokenMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_gt"))
			it.SmsTokenMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_lt"))
			it.SmsTokenLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_lt"))
			it.SmsTokenMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_lt"))
			it.SmsTokenMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_gte"))
			it.SmsTokenGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_gte"))
			it.SmsTokenMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_gte"))
			it.SmsTokenMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_lte"))
			it.SmsTokenLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_lte"))
			it.SmsTokenMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_lte"))
			it.SmsTokenMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_in"))
			it.SmsTokenIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_in"))
			it.SmsTokenMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_in"))
			it.SmsTokenMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_like"))
			it.SmsTokenLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_like"))
			it.SmsTokenMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_like"))
			it.SmsTokenMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_prefix"))
			it.SmsTokenPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_prefix"))
			it.SmsTokenMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_prefix"))
			it.SmsTokenMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_suffix"))
			it.SmsTokenSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin_suffix"))
			it.SmsTokenMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax_suffix"))
			it.SmsTokenMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken_null"))
			it.SmsTokenNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin"))
			it.StatusMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax"))
			it.StatusMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_ne"))
			it.StatusNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_ne"))
			it.StatusMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_ne"))
			it.StatusMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_gt"))
			it.StatusGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_gt"))
			it.StatusMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_gt"))
			it.StatusMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_lt"))
			it.StatusLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_lt"))
			it.StatusMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_lt"))
			it.StatusMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_gte"))
			it.StatusGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_gte"))
			it.StatusMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_gte"))
			it.StatusMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_lte"))
			it.StatusLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_lte"))
			it.StatusMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_lte"))
			it.StatusMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_in"))
			it.StatusIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_in"))
			it.StatusMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_in"))
			it.StatusMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_like"))
			it.StatusLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_like"))
			it.StatusMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_like"))
			it.StatusMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_prefix"))
			it.StatusPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_prefix"))
			it.StatusMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_prefix"))
			it.StatusMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_suffix"))
			it.StatusSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin_suffix"))
			it.StatusMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax_suffix"))
			it.StatusMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_null"))
			it.StatusNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId"))
			it.SenderID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin"))
			it.SenderIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax"))
			it.SenderIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_ne"))
			it.SenderIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_ne"))
			it.SenderIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_ne"))
			it.SenderIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_gt"))
			it.SenderIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_gt"))
			it.SenderIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_gt"))
			it.SenderIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_lt"))
			it.SenderIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_lt"))
			it.SenderIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_lt"))
			it.SenderIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_gte"))
			it.SenderIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_gte"))
			it.SenderIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_gte"))
			it.SenderIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_lte"))
			it.SenderIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_lte"))
			it.SenderIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_lte"))
			it.SenderIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_in"))
			it.SenderIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin_in"))
			it.SenderIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax_in"))
			it.SenderIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId_null"))
			it.SenderIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId"))
			it.ReceiverID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin"))
			it.ReceiverIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax"))
			it.ReceiverIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_ne"))
			it.ReceiverIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_ne"))
			it.ReceiverIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_ne"))
			it.ReceiverIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_gt"))
			it.ReceiverIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_gt"))
			it.ReceiverIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_gt"))
			it.ReceiverIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_lt"))
			it.ReceiverIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_lt"))
			it.ReceiverIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_lt"))
			it.ReceiverIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_gte"))
			it.ReceiverIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_gte"))
			it.ReceiverIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_gte"))
			it.ReceiverIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_lte"))
			it.ReceiverIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_lte"))
			it.ReceiverIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_lte"))
			it.ReceiverIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_in"))
			it.ReceiverIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin_in"))
			it.ReceiverIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax_in"))
			it.ReceiverIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId_null"))
			it.ReceiverIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId"))
			it.DeliverID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin"))
			it.DeliverIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax"))
			it.DeliverIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_ne"))
			it.DeliverIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_ne"))
			it.DeliverIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_ne"))
			it.DeliverIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_gt"))
			it.DeliverIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_gt"))
			it.DeliverIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_gt"))
			it.DeliverIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_lt"))
			it.DeliverIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_lt"))
			it.DeliverIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_lt"))
			it.DeliverIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_gte"))
			it.DeliverIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_gte"))
			it.DeliverIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_gte"))
			it.DeliverIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_lte"))
			it.DeliverIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_lte"))
			it.DeliverIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_lte"))
			it.DeliverIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_in"))
			it.DeliverIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin_in"))
			it.DeliverIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax_in"))
			it.DeliverIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId_null"))
			it.DeliverIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId"))
			it.VehicleTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin"))
			it.VehicleTypeIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax"))
			it.VehicleTypeIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_ne"))
			it.VehicleTypeIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_ne"))
			it.VehicleTypeIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_ne"))
			it.VehicleTypeIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_gt"))
			it.VehicleTypeIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_gt"))
			it.VehicleTypeIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_gt"))
			it.VehicleTypeIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_lt"))
			it.VehicleTypeIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_lt"))
			it.VehicleTypeIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_lt"))
			it.VehicleTypeIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_gte"))
			it.VehicleTypeIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_gte"))
			it.VehicleTypeIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_gte"))
			it.VehicleTypeIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_lte"))
			it.VehicleTypeIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_lte"))
			it.VehicleTypeIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_lte"))
			it.VehicleTypeIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_in"))
			it.VehicleTypeIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin_in"))
			it.VehicleTypeIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax_in"))
			it.VehicleTypeIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId_null"))
			it.VehicleTypeIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId"))
			it.DeliveryTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin"))
			it.DeliveryTypeIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax"))
			it.DeliveryTypeIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_ne"))
			it.DeliveryTypeIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_ne"))
			it.DeliveryTypeIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_ne"))
			it.DeliveryTypeIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_gt"))
			it.DeliveryTypeIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_gt"))
			it.DeliveryTypeIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_gt"))
			it.DeliveryTypeIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_lt"))
			it.DeliveryTypeIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_lt"))
			it.DeliveryTypeIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_lt"))
			it.DeliveryTypeIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_gte"))
			it.DeliveryTypeIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_gte"))
			it.DeliveryTypeIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_gte"))
			it.DeliveryTypeIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_lte"))
			it.DeliveryTypeIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_lte"))
			it.DeliveryTypeIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_lte"))
			it.DeliveryTypeIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_in"))
			it.DeliveryTypeIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin_in"))
			it.DeliveryTypeIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax_in"))
			it.DeliveryTypeIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId_null"))
			it.DeliveryTypeIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId"))
			it.DeliveryChannelID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin"))
			it.DeliveryChannelIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax"))
			it.DeliveryChannelIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_ne"))
			it.DeliveryChannelIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_ne"))
			it.DeliveryChannelIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_ne"))
			it.DeliveryChannelIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_gt"))
			it.DeliveryChannelIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_gt"))
			it.DeliveryChannelIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_gt"))
			it.DeliveryChannelIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_lt"))
			it.DeliveryChannelIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_lt"))
			it.DeliveryChannelIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_lt"))
			it.DeliveryChannelIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_gte"))
			it.DeliveryChannelIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_gte"))
			it.DeliveryChannelIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_gte"))
			it.DeliveryChannelIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_lte"))
			it.DeliveryChannelIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_lte"))
			it.DeliveryChannelIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_lte"))
			it.DeliveryChannelIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_in"))
			it.DeliveryChannelIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin_in"))
			it.DeliveryChannelIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax_in"))
			it.DeliveryChannelIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId_null"))
			it.DeliveryChannelIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			it.Sender, err = ec.unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
			it.Receiver, err = ec.unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver"))
			it.Deliver, err = ec.unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleType"))
			it.VehicleType, err = ec.unmarshalOVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryType"))
			it.DeliveryType, err = ec.unmarshalODeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannel"))
			it.DeliveryChannel, err = ec.unmarshalODeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliverySortType(ctx context.Context, obj interface{}) (DeliverySortType, error) {
	var it DeliverySortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotal"))
			it.PaymentTotal, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMin"))
			it.PaymentTotalMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalMax"))
			it.PaymentTotalMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTotalAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTotalAvg"))
			it.PaymentTotalAvg, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliver"))
			it.PaymentOnDeliver, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMin"))
			it.PaymentOnDeliverMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentOnDeliverMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOnDeliverMax"))
			it.PaymentOnDeliverMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTime"))
			it.CollectDateTime, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMin"))
			it.CollectDateTimeMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectDateTimeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectDateTimeMax"))
			it.CollectDateTimeMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddress"))
			it.CollectAddress, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMin"))
			it.CollectAddressMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectAddressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectAddressMax"))
			it.CollectAddressMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPoint"))
			it.CollectPoint, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMin"))
			it.CollectPointMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "collectPointMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectPointMax"))
			it.CollectPointMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTime"))
			it.DropDateTime, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMin"))
			it.DropDateTimeMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropDateTimeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropDateTimeMax"))
			it.DropDateTimeMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddress"))
			it.DropAddress, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMin"))
			it.DropAddressMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropAddressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropAddressMax"))
			it.DropAddressMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPoint"))
			it.DropPoint, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMin"))
			it.DropPointMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "dropPointMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dropPointMax"))
			it.DropPointMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistance"))
			it.ExpectedDistance, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMin"))
			it.ExpectedDistanceMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedDistanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedDistanceMax"))
			it.ExpectedDistanceMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCost"))
			it.ExpectedCost, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMin"))
			it.ExpectedCostMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostMax"))
			it.ExpectedCostMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedCostAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedCostAvg"))
			it.ExpectedCostAvg, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed"))
			it.Completed, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMin"))
			it.CompletedMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedMax"))
			it.CompletedMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsToken"))
			it.SmsToken, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMin"))
			it.SmsTokenMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "smsTokenMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsTokenMax"))
			it.SmsTokenMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin"))
			it.StatusMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax"))
			it.StatusMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId"))
			it.SenderID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMin"))
			it.SenderIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "senderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIdMax"))
			it.SenderIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverId"))
			it.ReceiverID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMin"))
			it.ReceiverIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverIdMax"))
			it.ReceiverIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverId"))
			it.DeliverID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMin"))
			it.DeliverIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverIdMax"))
			it.DeliverIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeId"))
			it.VehicleTypeID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMin"))
			it.VehicleTypeIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleTypeIdMax"))
			it.VehicleTypeIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeId"))
			it.DeliveryTypeID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMin"))
			it.DeliveryTypeIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryTypeIdMax"))
			it.DeliveryTypeIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelId"))
			it.DeliveryChannelID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMin"))
			it.DeliveryChannelIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannelIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannelIdMax"))
			it.DeliveryChannelIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "sender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			it.Sender, err = ec.unmarshalOPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
			it.Receiver, err = ec.unmarshalOPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver"))
			it.Deliver, err = ec.unmarshalOPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicleType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicleType"))
			it.VehicleType, err = ec.unmarshalOVehicleTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryType"))
			it.DeliveryType, err = ec.unmarshalODeliveryTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryChannel"))
			it.DeliveryChannel, err = ec.unmarshalODeliveryChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryTypeFilterType(ctx context.Context, obj interface{}) (DeliveryTypeFilterType, error) {
	var it DeliveryTypeFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalODeliveryTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalODeliveryTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_ne"))
			it.DeliveryIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_ne"))
			it.DeliveryIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_ne"))
			it.DeliveryIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gt"))
			it.DeliveryIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gt"))
			it.DeliveryIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gt"))
			it.DeliveryIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lt"))
			it.DeliveryIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lt"))
			it.DeliveryIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lt"))
			it.DeliveryIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gte"))
			it.DeliveryIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gte"))
			it.DeliveryIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gte"))
			it.DeliveryIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lte"))
			it.DeliveryIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lte"))
			it.DeliveryIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lte"))
			it.DeliveryIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_in"))
			it.DeliveryIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_in"))
			it.DeliveryIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_in"))
			it.DeliveryIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_null"))
			it.DeliveryIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryTypeSortType(ctx context.Context, obj interface{}) (DeliveryTypeSortType, error) {
	var it DeliveryTypeSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonFilterType(ctx context.Context, obj interface{}) (PersonFilterType, error) {
	var it PersonFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPersonFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPersonFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver"))
			it.Deliver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin"))
			it.DeliverMin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax"))
			it.DeliverMax, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_ne"))
			it.DeliverNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_ne"))
			it.DeliverMinNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_ne"))
			it.DeliverMaxNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_gt"))
			it.DeliverGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_gt"))
			it.DeliverMinGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_gt"))
			it.DeliverMaxGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_lt"))
			it.DeliverLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_lt"))
			it.DeliverMinLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_lt"))
			it.DeliverMaxLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_gte"))
			it.DeliverGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_gte"))
			it.DeliverMinGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_gte"))
			it.DeliverMaxGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_lte"))
			it.DeliverLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_lte"))
			it.DeliverMinLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_lte"))
			it.DeliverMaxLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_in"))
			it.DeliverIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin_in"))
			it.DeliverMinIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax_in"))
			it.DeliverMaxIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver_null"))
			it.DeliverNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ne"))
			it.EmailNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_ne"))
			it.EmailMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_ne"))
			it.EmailMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gt"))
			it.EmailGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gt"))
			it.EmailMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gt"))
			it.EmailMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lt"))
			it.EmailLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lt"))
			it.EmailMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lt"))
			it.EmailMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gte"))
			it.EmailGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gte"))
			it.EmailMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gte"))
			it.EmailMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lte"))
			it.EmailLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lte"))
			it.EmailMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lte"))
			it.EmailMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_in"))
			it.EmailMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_in"))
			it.EmailMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_like"))
			it.EmailLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_like"))
			it.EmailMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_like"))
			it.EmailMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_prefix"))
			it.EmailPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_prefix"))
			it.EmailMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_prefix"))
			it.EmailMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_suffix"))
			it.EmailSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_suffix"))
			it.EmailMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_suffix"))
			it.EmailMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_null"))
			it.EmailNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin"))
			it.PhoneMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax"))
			it.PhoneMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_ne"))
			it.PhoneNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_ne"))
			it.PhoneMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_ne"))
			it.PhoneMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_gt"))
			it.PhoneGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_gt"))
			it.PhoneMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_gt"))
			it.PhoneMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_lt"))
			it.PhoneLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_lt"))
			it.PhoneMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_lt"))
			it.PhoneMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_gte"))
			it.PhoneGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_gte"))
			it.PhoneMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_gte"))
			it.PhoneMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_lte"))
			it.PhoneLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_lte"))
			it.PhoneMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_lte"))
			it.PhoneMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_in"))
			it.PhoneIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_in"))
			it.PhoneMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_in"))
			it.PhoneMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_like"))
			it.PhoneLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_like"))
			it.PhoneMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_like"))
			it.PhoneMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_prefix"))
			it.PhonePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_prefix"))
			it.PhoneMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_prefix"))
			it.PhoneMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_suffix"))
			it.PhoneSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_suffix"))
			it.PhoneMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_suffix"))
			it.PhoneMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_null"))
			it.PhoneNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo"))
			it.DocumentNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin"))
			it.DocumentNoMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax"))
			it.DocumentNoMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_ne"))
			it.DocumentNoNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_ne"))
			it.DocumentNoMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_ne"))
			it.DocumentNoMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_gt"))
			it.DocumentNoGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_gt"))
			it.DocumentNoMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_gt"))
			it.DocumentNoMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_lt"))
			it.DocumentNoLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_lt"))
			it.DocumentNoMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_lt"))
			it.DocumentNoMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_gte"))
			it.DocumentNoGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_gte"))
			it.DocumentNoMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_gte"))
			it.DocumentNoMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_lte"))
			it.DocumentNoLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_lte"))
			it.DocumentNoMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_lte"))
			it.DocumentNoMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_in"))
			it.DocumentNoIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_in"))
			it.DocumentNoMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_in"))
			it.DocumentNoMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_like"))
			it.DocumentNoLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_like"))
			it.DocumentNoMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_like"))
			it.DocumentNoMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_prefix"))
			it.DocumentNoPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_prefix"))
			it.DocumentNoMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_prefix"))
			it.DocumentNoMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_suffix"))
			it.DocumentNoSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin_suffix"))
			it.DocumentNoMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax_suffix"))
			it.DocumentNoMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo_null"))
			it.DocumentNoNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_ne"))
			it.AvatarURLNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_ne"))
			it.AvatarURLMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_ne"))
			it.AvatarURLMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gt"))
			it.AvatarURLGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gt"))
			it.AvatarURLMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gt"))
			it.AvatarURLMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lt"))
			it.AvatarURLLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lt"))
			it.AvatarURLMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lt"))
			it.AvatarURLMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gte"))
			it.AvatarURLGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gte"))
			it.AvatarURLMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gte"))
			it.AvatarURLMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lte"))
			it.AvatarURLLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lte"))
			it.AvatarURLMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lte"))
			it.AvatarURLMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_in"))
			it.AvatarURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_in"))
			it.AvatarURLMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_in"))
			it.AvatarURLMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_like"))
			it.AvatarURLLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_like"))
			it.AvatarURLMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_like"))
			it.AvatarURLMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_prefix"))
			it.AvatarURLPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_prefix"))
			it.AvatarURLMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_prefix"))
			it.AvatarURLMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_suffix"))
			it.AvatarURLSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_suffix"))
			it.AvatarURLMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_suffix"))
			it.AvatarURLMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_null"))
			it.AvatarURLNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin"))
			it.DisplayNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax"))
			it.DisplayNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_ne"))
			it.DisplayNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_ne"))
			it.DisplayNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_ne"))
			it.DisplayNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_gt"))
			it.DisplayNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_gt"))
			it.DisplayNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_gt"))
			it.DisplayNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_lt"))
			it.DisplayNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_lt"))
			it.DisplayNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_lt"))
			it.DisplayNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_gte"))
			it.DisplayNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_gte"))
			it.DisplayNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_gte"))
			it.DisplayNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_lte"))
			it.DisplayNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_lte"))
			it.DisplayNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_lte"))
			it.DisplayNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_in"))
			it.DisplayNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_in"))
			it.DisplayNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_in"))
			it.DisplayNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_like"))
			it.DisplayNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_like"))
			it.DisplayNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_like"))
			it.DisplayNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_prefix"))
			it.DisplayNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_prefix"))
			it.DisplayNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_prefix"))
			it.DisplayNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_suffix"))
			it.DisplayNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_suffix"))
			it.DisplayNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_suffix"))
			it.DisplayNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_null"))
			it.DisplayNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_ne"))
			it.FirstNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_ne"))
			it.FirstNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_ne"))
			it.FirstNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gt"))
			it.FirstNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gt"))
			it.FirstNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gt"))
			it.FirstNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lt"))
			it.FirstNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lt"))
			it.FirstNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lt"))
			it.FirstNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gte"))
			it.FirstNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gte"))
			it.FirstNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gte"))
			it.FirstNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lte"))
			it.FirstNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lte"))
			it.FirstNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lte"))
			it.FirstNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_in"))
			it.FirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_in"))
			it.FirstNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_in"))
			it.FirstNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_like"))
			it.FirstNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_like"))
			it.FirstNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_like"))
			it.FirstNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_prefix"))
			it.FirstNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_prefix"))
			it.FirstNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_prefix"))
			it.FirstNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_suffix"))
			it.FirstNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_suffix"))
			it.FirstNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_suffix"))
			it.FirstNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_null"))
			it.FirstNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_ne"))
			it.LastNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_ne"))
			it.LastNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_ne"))
			it.LastNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gt"))
			it.LastNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gt"))
			it.LastNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gt"))
			it.LastNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lt"))
			it.LastNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lt"))
			it.LastNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lt"))
			it.LastNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gte"))
			it.LastNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gte"))
			it.LastNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gte"))
			it.LastNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lte"))
			it.LastNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lte"))
			it.LastNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lte"))
			it.LastNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_in"))
			it.LastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_in"))
			it.LastNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_in"))
			it.LastNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_like"))
			it.LastNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_like"))
			it.LastNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_like"))
			it.LastNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_prefix"))
			it.LastNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_prefix"))
			it.LastNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_prefix"))
			it.LastNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_suffix"))
			it.LastNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_suffix"))
			it.LastNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_suffix"))
			it.LastNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_null"))
			it.LastNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_ne"))
			it.NickNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_ne"))
			it.NickNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_ne"))
			it.NickNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gt"))
			it.NickNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gt"))
			it.NickNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gt"))
			it.NickNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lt"))
			it.NickNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lt"))
			it.NickNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lt"))
			it.NickNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gte"))
			it.NickNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gte"))
			it.NickNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gte"))
			it.NickNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lte"))
			it.NickNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lte"))
			it.NickNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lte"))
			it.NickNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_in"))
			it.NickNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_in"))
			it.NickNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_in"))
			it.NickNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_like"))
			it.NickNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_like"))
			it.NickNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_like"))
			it.NickNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_prefix"))
			it.NickNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_prefix"))
			it.NickNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_prefix"))
			it.NickNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_suffix"))
			it.NickNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_suffix"))
			it.NickNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_suffix"))
			it.NickNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_null"))
			it.NickNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_ne"))
			it.LocationNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_ne"))
			it.LocationMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_ne"))
			it.LocationMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gt"))
			it.LocationGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gt"))
			it.LocationMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gt"))
			it.LocationMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lt"))
			it.LocationLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lt"))
			it.LocationMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lt"))
			it.LocationMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gte"))
			it.LocationGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gte"))
			it.LocationMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gte"))
			it.LocationMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lte"))
			it.LocationLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lte"))
			it.LocationMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lte"))
			it.LocationMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_in"))
			it.LocationIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_in"))
			it.LocationMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_in"))
			it.LocationMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_like"))
			it.LocationLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_like"))
			it.LocationMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_like"))
			it.LocationMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_prefix"))
			it.LocationPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_prefix"))
			it.LocationMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_prefix"))
			it.LocationMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_suffix"))
			it.LocationSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_suffix"))
			it.LocationMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_suffix"))
			it.LocationMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_null"))
			it.LocationNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_ne"))
			it.UserIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_ne"))
			it.UserIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_ne"))
			it.UserIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gt"))
			it.UserIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gt"))
			it.UserIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gt"))
			it.UserIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lt"))
			it.UserIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lt"))
			it.UserIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lt"))
			it.UserIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gte"))
			it.UserIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gte"))
			it.UserIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gte"))
			it.UserIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lte"))
			it.UserIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lte"))
			it.UserIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lte"))
			it.UserIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_in"))
			it.UserIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_in"))
			it.UserIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_in"))
			it.UserIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_null"))
			it.UserIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveries"))
			it.Deliveries, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesSent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesSent"))
			it.DeliveriesSent, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesReceived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesReceived"))
			it.DeliveriesReceived, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonSortType(ctx context.Context, obj interface{}) (PersonSortType, error) {
	var it PersonSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliver"))
			it.Deliver, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMin"))
			it.DeliverMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverMax"))
			it.DeliverMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin"))
			it.PhoneMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax"))
			it.PhoneMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNo"))
			it.DocumentNo, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMin"))
			it.DocumentNoMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNoMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNoMax"))
			it.DocumentNoMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin"))
			it.DisplayNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax"))
			it.DisplayNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesIds"))
			it.DeliveriesIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesIdsMin"))
			it.DeliveriesIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesIdsMax"))
			it.DeliveriesIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesSentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesSentIds"))
			it.DeliveriesSentIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesSentIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesSentIdsMin"))
			it.DeliveriesSentIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesSentIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesSentIdsMax"))
			it.DeliveriesSentIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesReceivedIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesReceivedIds"))
			it.DeliveriesReceivedIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesReceivedIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesReceivedIdsMin"))
			it.DeliveriesReceivedIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesReceivedIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesReceivedIdsMax"))
			it.DeliveriesReceivedIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveries"))
			it.Deliveries, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesSent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesSent"))
			it.DeliveriesSent, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveriesReceived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveriesReceived"))
			it.DeliveriesReceived, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleTypeFilterType(ctx context.Context, obj interface{}) (VehicleTypeFilterType, error) {
	var it VehicleTypeFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOVehicleTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOVehicleTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_ne"))
			it.DeliveryIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_ne"))
			it.DeliveryIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_ne"))
			it.DeliveryIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gt"))
			it.DeliveryIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gt"))
			it.DeliveryIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gt"))
			it.DeliveryIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lt"))
			it.DeliveryIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lt"))
			it.DeliveryIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lt"))
			it.DeliveryIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_gte"))
			it.DeliveryIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_gte"))
			it.DeliveryIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_gte"))
			it.DeliveryIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_lte"))
			it.DeliveryIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_lte"))
			it.DeliveryIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_lte"))
			it.DeliveryIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_in"))
			it.DeliveryIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin_in"))
			it.DeliveryIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax_in"))
			it.DeliveryIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId_null"))
			it.DeliveryIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleTypeSortType(ctx context.Context, obj interface{}) (VehicleTypeSortType, error) {
	var it VehicleTypeSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryId"))
			it.DeliveryID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMin"))
			it.DeliveryIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryIdMax"))
			it.DeliveryIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var deliveryImplementors = []string{"Delivery"}

func (ec *executionContext) _Delivery(ctx context.Context, sel ast.SelectionSet, obj *Delivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Delivery")
		case "id":
			out.Values[i] = ec._Delivery_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_sender(ctx, field, obj)
				return res
			})
		case "receiver":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_receiver(ctx, field, obj)
				return res
			})
		case "deliver":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_deliver(ctx, field, obj)
				return res
			})
		case "vehicleType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_vehicleType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveryType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_deliveryType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveryChannel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_deliveryChannel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentId":
			out.Values[i] = ec._Delivery_paymentId(ctx, field, obj)
		case "paymentTotal":
			out.Values[i] = ec._Delivery_paymentTotal(ctx, field, obj)
		case "paymentOnDeliver":
			out.Values[i] = ec._Delivery_paymentOnDeliver(ctx, field, obj)
		case "collectDateTime":
			out.Values[i] = ec._Delivery_collectDateTime(ctx, field, obj)
		case "collectAddress":
			out.Values[i] = ec._Delivery_collectAddress(ctx, field, obj)
		case "collectPoint":
			out.Values[i] = ec._Delivery_collectPoint(ctx, field, obj)
		case "dropDateTime":
			out.Values[i] = ec._Delivery_dropDateTime(ctx, field, obj)
		case "dropAddress":
			out.Values[i] = ec._Delivery_dropAddress(ctx, field, obj)
		case "dropPoint":
			out.Values[i] = ec._Delivery_dropPoint(ctx, field, obj)
		case "expectedDistance":
			out.Values[i] = ec._Delivery_expectedDistance(ctx, field, obj)
		case "expectedCost":
			out.Values[i] = ec._Delivery_expectedCost(ctx, field, obj)
		case "completed":
			out.Values[i] = ec._Delivery_completed(ctx, field, obj)
		case "smsToken":
			out.Values[i] = ec._Delivery_smsToken(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Delivery_status(ctx, field, obj)
		case "instructions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Delivery_instructions(ctx, field, obj)
				return res
			})
		case "senderId":
			out.Values[i] = ec._Delivery_senderId(ctx, field, obj)
		case "receiverId":
			out.Values[i] = ec._Delivery_receiverId(ctx, field, obj)
		case "deliverId":
			out.Values[i] = ec._Delivery_deliverId(ctx, field, obj)
		case "vehicleTypeId":
			out.Values[i] = ec._Delivery_vehicleTypeId(ctx, field, obj)
		case "deliveryTypeId":
			out.Values[i] = ec._Delivery_deliveryTypeId(ctx, field, obj)
		case "deliveryChannelId":
			out.Values[i] = ec._Delivery_deliveryChannelId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Delivery_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Delivery_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Delivery_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Delivery_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryChannelImplementors = []string{"DeliveryChannel"}

func (ec *executionContext) _DeliveryChannel(ctx context.Context, sel ast.SelectionSet, obj *DeliveryChannel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryChannelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryChannel")
		case "id":
			out.Values[i] = ec._DeliveryChannel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._DeliveryChannel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._DeliveryChannel_description(ctx, field, obj)
		case "delivery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryChannel_delivery(ctx, field, obj)
				return res
			})
		case "deliveryId":
			out.Values[i] = ec._DeliveryChannel_deliveryId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._DeliveryChannel_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DeliveryChannel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._DeliveryChannel_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._DeliveryChannel_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryChannelResultTypeImplementors = []string{"DeliveryChannelResultType"}

func (ec *executionContext) _DeliveryChannelResultType(ctx context.Context, sel ast.SelectionSet, obj *DeliveryChannelResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryChannelResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryChannelResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryChannelResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryChannelResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryResultTypeImplementors = []string{"DeliveryResultType"}

func (ec *executionContext) _DeliveryResultType(ctx context.Context, sel ast.SelectionSet, obj *DeliveryResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryTypeImplementors = []string{"DeliveryType"}

func (ec *executionContext) _DeliveryType(ctx context.Context, sel ast.SelectionSet, obj *DeliveryType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryType")
		case "id":
			out.Values[i] = ec._DeliveryType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._DeliveryType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._DeliveryType_description(ctx, field, obj)
		case "delivery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryType_delivery(ctx, field, obj)
				return res
			})
		case "deliveryId":
			out.Values[i] = ec._DeliveryType_deliveryId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._DeliveryType_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DeliveryType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._DeliveryType_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._DeliveryType_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryTypeResultTypeImplementors = []string{"DeliveryTypeResultType"}

func (ec *executionContext) _DeliveryTypeResultType(ctx context.Context, sel ast.SelectionSet, obj *DeliveryTypeResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryTypeResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryTypeResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryTypeResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryTypeResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createDelivery":
			out.Values[i] = ec._Mutation_createDelivery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDelivery":
			out.Values[i] = ec._Mutation_updateDelivery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDelivery":
			out.Values[i] = ec._Mutation_deleteDelivery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllDeliveries":
			out.Values[i] = ec._Mutation_deleteAllDeliveries(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPerson":
			out.Values[i] = ec._Mutation_createPerson(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePerson":
			out.Values[i] = ec._Mutation_updatePerson(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePerson":
			out.Values[i] = ec._Mutation_deletePerson(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPeople":
			out.Values[i] = ec._Mutation_deleteAllPeople(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDeliveryType":
			out.Values[i] = ec._Mutation_createDeliveryType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDeliveryType":
			out.Values[i] = ec._Mutation_updateDeliveryType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDeliveryType":
			out.Values[i] = ec._Mutation_deleteDeliveryType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllDeliveryTypes":
			out.Values[i] = ec._Mutation_deleteAllDeliveryTypes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDeliveryChannel":
			out.Values[i] = ec._Mutation_createDeliveryChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDeliveryChannel":
			out.Values[i] = ec._Mutation_updateDeliveryChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDeliveryChannel":
			out.Values[i] = ec._Mutation_deleteDeliveryChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllDeliveryChannels":
			out.Values[i] = ec._Mutation_deleteAllDeliveryChannels(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createVehicleType":
			out.Values[i] = ec._Mutation_createVehicleType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateVehicleType":
			out.Values[i] = ec._Mutation_updateVehicleType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteVehicleType":
			out.Values[i] = ec._Mutation_deleteVehicleType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllVehicleTypes":
			out.Values[i] = ec._Mutation_deleteAllVehicleTypes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImplementors = []string{"Person"}

func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "id":
			out.Values[i] = ec._Person_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deliver":
			out.Values[i] = ec._Person_deliver(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Person_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Person_phone(ctx, field, obj)
		case "documentNo":
			out.Values[i] = ec._Person_documentNo(ctx, field, obj)
		case "avatarURL":
			out.Values[i] = ec._Person_avatarURL(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._Person_displayName(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Person_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Person_lastName(ctx, field, obj)
		case "nickName":
			out.Values[i] = ec._Person_nickName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Person_description(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Person_location(ctx, field, obj)
		case "deliveries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesSent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesSent(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesReceived":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesReceived(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			out.Values[i] = ec._Person_userId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Person_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Person_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Person_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Person_createdBy(ctx, field, obj)
		case "deliveriesIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesSentIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesSentIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesSentConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesSentConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesReceivedIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesReceivedIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveriesReceivedConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Person_deliveriesReceivedConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personResultTypeImplementors = []string{"PersonResultType"}

func (ec *executionContext) _PersonResultType(ctx context.Context, sel ast.SelectionSet, obj *PersonResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PersonResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PersonResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "delivery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_delivery(ctx, field)
				return res
			})
		case "deliveries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deliveries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "person":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_person(ctx, field)
				return res
			})
		case "people":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_people(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveryType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deliveryType(ctx, field)
				return res
			})
		case "deliveryTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deliveryTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deliveryChannel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deliveryChannel(ctx, field)
				return res
			})
		case "deliveryChannels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deliveryChannels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicleType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicleType(ctx, field)
				return res
			})
		case "vehicleTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicleTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleTypeImplementors = []string{"VehicleType"}

func (ec *executionContext) _VehicleType(ctx context.Context, sel ast.SelectionSet, obj *VehicleType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleType")
		case "id":
			out.Values[i] = ec._VehicleType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._VehicleType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._VehicleType_description(ctx, field, obj)
		case "delivery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VehicleType_delivery(ctx, field, obj)
				return res
			})
		case "deliveryId":
			out.Values[i] = ec._VehicleType_deliveryId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._VehicleType_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._VehicleType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._VehicleType_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._VehicleType_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleTypeResultTypeImplementors = []string{"VehicleTypeResultType"}

func (ec *executionContext) _VehicleTypeResultType(ctx context.Context, sel ast.SelectionSet, obj *VehicleTypeResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleTypeResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleTypeResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VehicleTypeResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VehicleTypeResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDelivery2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx context.Context, sel ast.SelectionSet, v Delivery) graphql.Marshaler {
	return ec._Delivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNDelivery2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryᚄ(ctx context.Context, sel ast.SelectionSet, v []*Delivery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *Delivery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Delivery(ctx, sel, v)
}

func (ec *executionContext) marshalNDeliveryChannel2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx context.Context, sel ast.SelectionSet, v DeliveryChannel) graphql.Marshaler {
	return ec._DeliveryChannel(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeliveryChannel2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelᚄ(ctx context.Context, sel ast.SelectionSet, v []*DeliveryChannel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx context.Context, sel ast.SelectionSet, v *DeliveryChannel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeliveryChannel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliveryChannelCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx context.Context, v interface{}) (*DeliveryChannelFilterType, error) {
	res, err := ec.unmarshalInputDeliveryChannelFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryChannelResultType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelResultType(ctx context.Context, sel ast.SelectionSet, v DeliveryChannelResultType) graphql.Marshaler {
	return ec._DeliveryChannelResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeliveryChannelResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelResultType(ctx context.Context, sel ast.SelectionSet, v *DeliveryChannelResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeliveryChannelResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliveryChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortType(ctx context.Context, v interface{}) (*DeliveryChannelSortType, error) {
	res, err := ec.unmarshalInputDeliveryChannelSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeliveryChannelUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDeliveryCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx context.Context, v interface{}) (*DeliveryFilterType, error) {
	res, err := ec.unmarshalInputDeliveryFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryResultType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx context.Context, sel ast.SelectionSet, v DeliveryResultType) graphql.Marshaler {
	return ec._DeliveryResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeliveryResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryResultType(ctx context.Context, sel ast.SelectionSet, v *DeliveryResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeliveryResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx context.Context, v interface{}) (*DeliverySortType, error) {
	res, err := ec.unmarshalInputDeliverySortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx context.Context, sel ast.SelectionSet, v DeliveryType) graphql.Marshaler {
	return ec._DeliveryType(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeliveryType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*DeliveryType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx context.Context, sel ast.SelectionSet, v *DeliveryType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeliveryType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliveryTypeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx context.Context, v interface{}) (*DeliveryTypeFilterType, error) {
	res, err := ec.unmarshalInputDeliveryTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryTypeResultType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeResultType(ctx context.Context, sel ast.SelectionSet, v DeliveryTypeResultType) graphql.Marshaler {
	return ec._DeliveryTypeResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeliveryTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeResultType(ctx context.Context, sel ast.SelectionSet, v *DeliveryTypeResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeliveryTypeResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliveryTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortType(ctx context.Context, v interface{}) (*DeliveryTypeSortType, error) {
	res, err := ec.unmarshalInputDeliveryTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeliveryTypeUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDeliveryUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNPerson2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx context.Context, sel ast.SelectionSet, v Person) graphql.Marshaler {
	return ec._Person(ctx, sel, &v)
}

func (ec *executionContext) marshalNPerson2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonᚄ(ctx context.Context, sel ast.SelectionSet, v []*Person) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx context.Context, sel ast.SelectionSet, v *Person) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPersonCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx context.Context, v interface{}) (*PersonFilterType, error) {
	res, err := ec.unmarshalInputPersonFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPersonResultType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonResultType(ctx context.Context, sel ast.SelectionSet, v PersonResultType) graphql.Marshaler {
	return ec._PersonResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonResultType(ctx context.Context, sel ast.SelectionSet, v *PersonResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx context.Context, v interface{}) (*PersonSortType, error) {
	res, err := ec.unmarshalInputPersonSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPersonUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx context.Context, sel ast.SelectionSet, v VehicleType) graphql.Marshaler {
	return ec._VehicleType(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*VehicleType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx context.Context, sel ast.SelectionSet, v *VehicleType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleTypeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx context.Context, v interface{}) (*VehicleTypeFilterType, error) {
	res, err := ec.unmarshalInputVehicleTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleTypeResultType2githubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeResultType(ctx context.Context, sel ast.SelectionSet, v VehicleTypeResultType) graphql.Marshaler {
	return ec._VehicleTypeResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeResultType(ctx context.Context, sel ast.SelectionSet, v *VehicleTypeResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleTypeResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortType(ctx context.Context, v interface{}) (*VehicleTypeSortType, error) {
	res, err := ec.unmarshalInputVehicleTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleTypeUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalODelivery2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Delivery(ctx, sel, v)
}

func (ec *executionContext) marshalODeliveryChannel2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannel(ctx context.Context, sel ast.SelectionSet, v *DeliveryChannel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeliveryChannel(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeliveryChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterTypeᚄ(ctx context.Context, v interface{}) ([]*DeliveryChannelFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliveryChannelFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelFilterType(ctx context.Context, v interface{}) (*DeliveryChannelFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliveryChannelFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeliveryChannelSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortTypeᚄ(ctx context.Context, v interface{}) ([]*DeliveryChannelSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliveryChannelSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryChannelSortType(ctx context.Context, v interface{}) (*DeliveryChannelSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliveryChannelSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeliveryFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterTypeᚄ(ctx context.Context, v interface{}) ([]*DeliveryFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliveryFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryFilterType(ctx context.Context, v interface{}) (*DeliveryFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliveryFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeliverySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortTypeᚄ(ctx context.Context, v interface{}) ([]*DeliverySortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliverySortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliverySortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliverySortType(ctx context.Context, v interface{}) (*DeliverySortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliverySortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeliveryType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryType(ctx context.Context, sel ast.SelectionSet, v *DeliveryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeliveryType(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeliveryTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterTypeᚄ(ctx context.Context, v interface{}) ([]*DeliveryTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliveryTypeFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeFilterType(ctx context.Context, v interface{}) (*DeliveryTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliveryTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeliveryTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortTypeᚄ(ctx context.Context, v interface{}) ([]*DeliveryTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*DeliveryTypeSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐDeliveryTypeSortType(ctx context.Context, v interface{}) (*DeliveryTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeliveryTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, v interface{}) (*ObjectSortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ObjectSortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, sel ast.SelectionSet, v *ObjectSortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPerson2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPerson(ctx context.Context, sel ast.SelectionSet, v *Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPersonFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterTypeᚄ(ctx context.Context, v interface{}) ([]*PersonFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PersonFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPersonFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonFilterType(ctx context.Context, v interface{}) (*PersonFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPersonSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortTypeᚄ(ctx context.Context, v interface{}) ([]*PersonSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PersonSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPersonSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐPersonSortType(ctx context.Context, v interface{}) (*PersonSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOVehicleType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleType(ctx context.Context, sel ast.SelectionSet, v *VehicleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterTypeᚄ(ctx context.Context, v interface{}) ([]*VehicleTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*VehicleTypeFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeFilterType(ctx context.Context, v interface{}) (*VehicleTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortTypeᚄ(ctx context.Context, v interface{}) ([]*VehicleTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*VehicleTypeSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋdeliverᚑapiᚑgoᚋgenᚐVehicleTypeSortType(ctx context.Context, v interface{}) (*VehicleTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
